{
  "version": 3,
  "sources": ["src/app/features/categories/services/category.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ApiService } from '../../../core/services/api.service';\nimport { HttpParams } from '@angular/common/http';\nimport { Category, CategoryRequest } from '../models/category.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryService {\n  constructor(private api: ApiService) {}\n\n  /**\n   * Récupère la liste de toutes les catégories\n   * @returns Observable contenant un tableau de catégories\n   */\n  getCategories(): Observable<Category[]> {\n    console.log('Appel API pour récupérer toutes les catégories');\n    return this.api.get<Category[]>('/categories');\n  }\n\n  /**\n   * Récupère une catégorie par son identifiant\n   * @param id Identifiant de la catégorie\n   * @returns Observable contenant la catégorie\n   */\n  getCategory(id: number): Observable<Category> {\n    return this.api.get<Category>(`/categories/${id}`);\n  }\n\n  /**\n   * Crée une nouvelle catégorie\n   * @param category Données de la catégorie à créer\n   * @returns Observable contenant la catégorie créée\n   */\n  createCategory(body: CategoryRequest): Observable<Category> {\n    return this.api.post<Category>('/categories', body);\n  }\n\n  /**\n   * Met à jour une catégorie existante\n   * @param id Identifiant de la catégorie\n   * @param category Nouvelles données de la catégorie\n   * @returns Observable contenant la catégorie mise à jour\n   */\n  updateCategory(id: number, body: CategoryRequest): Observable<Category> {\n    return this.api.put<Category>(`/categories/${id}`, body);\n  }\n\n  /**\n   * Supprime une catégorie\n   * @param id Identifiant de la catégorie à supprimer\n   * @returns Observable\n   */\n  deleteCategory(id: number): Observable<void> {\n    return this.api.delete<void>(`/categories/${id}`);\n  }\n\n  /**\n   * Vérifie si une catégorie existe avec un nom donné\n   * @param name Nom de la catégorie à vérifier\n   * @returns Observable contenant un booléen\n   */\n  categoryExists(name: string): Observable<boolean> {\n    return this.api.get<boolean>(`/categories/exists?name=${encodeURIComponent(name)}`);\n  }\n} "],
  "mappings": ";;;;;;;;;AASM,IAAO,kBAAP,MAAO,iBAAe;EAC1B,YAAoB,KAAe;AAAf,SAAA,MAAA;EAAkB;;;;;EAMtC,gBAAa;AACX,YAAQ,IAAI,yDAAgD;AAC5D,WAAO,KAAK,IAAI,IAAgB,aAAa;EAC/C;;;;;;EAOA,YAAY,IAAU;AACpB,WAAO,KAAK,IAAI,IAAc,eAAe,EAAE,EAAE;EACnD;;;;;;EAOA,eAAe,MAAqB;AAClC,WAAO,KAAK,IAAI,KAAe,eAAe,IAAI;EACpD;;;;;;;EAQA,eAAe,IAAY,MAAqB;AAC9C,WAAO,KAAK,IAAI,IAAc,eAAe,EAAE,IAAI,IAAI;EACzD;;;;;;EAOA,eAAe,IAAU;AACvB,WAAO,KAAK,IAAI,OAAa,eAAe,EAAE,EAAE;EAClD;;;;;;EAOA,eAAe,MAAY;AACzB,WAAO,KAAK,IAAI,IAAa,2BAA2B,mBAAmB,IAAI,CAAC,EAAE;EACpF;;;uBAxDW,kBAAe,mBAAA,UAAA,CAAA;IAAA;EAAA;;4EAAf,kBAAe,SAAf,iBAAe,WAAA,YAFd,OAAM,CAAA;EAAA;;",
  "names": []
}
