{
  "version": 3,
  "sources": ["src/app/features/controls/services/control.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiService } from '../../../core/services/api.service';\nimport { Control, ControlType, ControlStatus, ControlFrequency } from '../models/control.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ControlService {\n  private readonly basePath = '/controls';\n\n  constructor(private apiService: ApiService) {}\n\n  /**\n   * Récupère la liste de tous les contrôles\n   * @returns Observable contenant un tableau de contrôles\n   */\n  getControls(): Observable<Control[]> {\n    return this.apiService.get<any[]>(this.basePath)\n      .pipe(\n        map(controlsData => controlsData.map(control => this.mapControlResponse(control))),\n        catchError(error => {\n          console.error('Erreur lors de la récupération des contrôles', error);\n          return throwError(() => new Error('Impossible de récupérer la liste des contrôles. Veuillez réessayer.'));\n        })\n      );\n  }\n\n  /**\n   * Récupère un contrôle par son identifiant\n   * @param id Identifiant du contrôle\n   * @returns Observable contenant le contrôle\n   */\n  getControl(id: string): Observable<Control> {\n    return this.apiService.get<any>(`${this.basePath}/${id}`)\n      .pipe(\n        map(controlData => this.mapControlResponse(controlData)),\n        catchError(error => {\n          console.error(`Erreur lors de la récupération du contrôle ${id}`, error);\n          return throwError(() => new Error('Impossible de récupérer les détails du contrôle. Veuillez réessayer.'));\n        })\n      );\n  }\n\n  /**\n   * Crée un nouveau contrôle\n   * @param control Données du contrôle à créer\n   * @returns Observable contenant le contrôle créé\n   */\n  createControl(control: Partial<Control>): Observable<Control> {\n    const controlRequest = this.formatControlRequest(control);\n    \n    return this.apiService.post<any>(this.basePath, controlRequest)\n      .pipe(\n        map(controlData => this.mapControlResponse(controlData)),\n        catchError(error => {\n          console.error('Erreur lors de la création du contrôle', error);\n          const message = this.getErrorMessage(error) || 'Impossible de créer le contrôle. Veuillez réessayer.';\n          return throwError(() => new Error(message));\n        })\n      );\n  }\n\n  /**\n   * Met à jour un contrôle existant\n   * @param id Identifiant du contrôle\n   * @param control Nouvelles données du contrôle\n   * @returns Observable contenant le contrôle mis à jour\n   */\n  updateControl(id: string, control: Partial<Control>): Observable<Control> {\n    const controlRequest = this.formatControlRequest(control);\n    \n    return this.apiService.put<any>(`${this.basePath}/${id}`, controlRequest)\n      .pipe(\n        map(controlData => this.mapControlResponse(controlData)),\n        catchError(error => {\n          console.error(`Erreur lors de la mise à jour du contrôle ${id}`, error);\n          const message = this.getErrorMessage(error) || 'Impossible de mettre à jour le contrôle. Veuillez réessayer.';\n          return throwError(() => new Error(message));\n        })\n      );\n  }\n\n  /**\n   * Supprime un contrôle\n   * @param id Identifiant du contrôle à supprimer\n   * @returns Observable\n   */\n  deleteControl(id: string): Observable<void> {\n    return this.apiService.delete<void>(`${this.basePath}/${id}`)\n      .pipe(\n        catchError(error => {\n          console.error(`Erreur lors de la suppression du contrôle ${id}`, error);\n          return throwError(() => new Error('Impossible de supprimer le contrôle. Veuillez réessayer.'));\n        })\n      );\n  }\n\n  /**\n   * Récupère les contrôles par type\n   * @param type Type de contrôle\n   * @returns Observable contenant un tableau de contrôles\n   */\n  getControlsByType(type: string): Observable<Control[]> {\n    return this.apiService.get<any[]>(`${this.basePath}/type/${type}`)\n      .pipe(\n        map(controlsData => controlsData.map(control => this.mapControlResponse(control))),\n        catchError(error => {\n          console.error(`Erreur lors de la récupération des contrôles de type ${type}`, error);\n          return throwError(() => new Error('Impossible de récupérer les contrôles de ce type. Veuillez réessayer.'));\n        })\n      );\n  }\n\n  /**\n   * Récupère les contrôles par statut\n   * @param status Statut des contrôles\n   * @returns Observable contenant un tableau de contrôles\n   */\n  getControlsByStatus(status: string): Observable<Control[]> {\n    return this.apiService.get<any[]>(`${this.basePath}/status/${status}`)\n      .pipe(\n        map(controlsData => controlsData.map(control => this.mapControlResponse(control))),\n        catchError(error => {\n          console.error(`Erreur lors de la récupération des contrôles avec le statut ${status}`, error);\n          return throwError(() => new Error('Impossible de récupérer les contrôles avec ce statut. Veuillez réessayer.'));\n        })\n      );\n  }\n\n  /**\n   * Récupère les contrôles par fréquence\n   * @param frequency Fréquence du contrôle\n   * @returns Observable contenant un tableau de contrôles\n   */\n  getControlsByFrequency(frequency: ControlFrequency): Observable<Control[]> {\n    return this.apiService.get<Control[]>(`${this.basePath}/frequency/${frequency}`);\n  }\n\n  /**\n   * Récupère les contrôles associés à un risque\n   * @param riskId Identifiant du risque\n   * @returns Observable contenant un tableau de contrôles\n   */\n  getControlsByRisk(riskId: string): Observable<Control[]> {\n    return this.apiService.get<any[]>(`${this.basePath}/risk/${riskId}`)\n      .pipe(\n        map(controlsData => controlsData.map(control => this.mapControlResponse(control))),\n        catchError(error => {\n          console.error(`Erreur lors de la récupération des contrôles associés au risque ${riskId}`, error);\n          return throwError(() => new Error('Impossible de récupérer les contrôles associés à ce risque. Veuillez réessayer.'));\n        })\n      );\n  }\n\n  /**\n   * Mappe la réponse du backend vers le modèle frontend\n   * @param controlData Données du contrôle provenant du backend\n   * @returns Objet Control pour le frontend\n   */\n  private mapControlResponse(controlData: any): Control {\n    return {\n      ...controlData,\n      // Conversion de l'ID numérique en string si nécessaire\n      id: controlData.id?.toString(),\n      // Conversion des dates si elles existent\n      implementationDate: controlData.implementationDate ? new Date(controlData.implementationDate) : undefined,\n      lastTestedDate: controlData.lastTestedDate ? new Date(controlData.lastTestedDate) : undefined,\n      createdAt: controlData.createdAt ? new Date(controlData.createdAt) : undefined,\n      updatedAt: controlData.updatedAt ? new Date(controlData.updatedAt) : undefined,\n      // Extraire les IDs des risques depuis la propriété risks[]\n      riskIds: controlData.risks ? controlData.risks.map((risk: any) => risk.id.toString()) : []\n    } as Control;\n  }\n\n  /**\n   * Formate les données du contrôle pour correspondre au format attendu par le backend\n   * @param control Données du contrôle\n   * @returns Objet formaté pour le backend\n   */\n  private formatControlRequest(control: Partial<Control>): any {\n    return {\n      name: control.name,\n      description: control.description,\n      type: control.type,\n      status: control.status,\n      frequency: control.frequency,\n      owner: control.owner,\n      implementationDate: control.implementationDate,\n      lastTestedDate: control.lastTestedDate,\n      effectivenessScore: control.effectivenessScore,\n      documentation: control.documentation,\n      riskIds: control.riskIds\n    };\n  }\n\n  /**\n   * Extrait un message d'erreur lisible de la réponse HTTP\n   * @param error Erreur HTTP\n   * @returns Message d'erreur lisible\n   */\n  private getErrorMessage(error: any): string {\n    if (error.error) {\n      if (typeof error.error === 'string') {\n        return error.error;\n      }\n      if (error.error.message) {\n        return error.error.message;\n      }\n      if (typeof error.error === 'object') {\n        // Si c'est un objet d'erreurs de validation (champ -> message)\n        const validationErrors = Object.entries(error.error)\n          .map(([field, message]) => `${field}: ${message}`)\n          .join(', ');\n        \n        if (validationErrors) {\n          return `Erreurs de validation: ${validationErrors}`;\n        }\n      }\n    }\n    return error.statusText || 'Une erreur est survenue';\n  }\n} "],
  "mappings": "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",
  "names": []
}
