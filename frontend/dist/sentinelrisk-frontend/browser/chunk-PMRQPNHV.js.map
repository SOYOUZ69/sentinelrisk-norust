{
  "version": 3,
  "sources": ["src/app/core/services/api.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  private apiUrl = environment.apiUrl;\n  private apiPrefix = '/api'; // Préfixe pour tous les appels d'API\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Effectue une requête HTTP GET\n   * @param path Chemin de l'API (sans le préfixe de base)\n   * @param params Paramètres optionnels de la requête\n   * @returns Observable avec les données\n   */\n  get<T>(path: string, params: HttpParams = new HttpParams()): Observable<T> {\n    const url = `${this.apiUrl}${this.apiPrefix}${path}`;\n    console.log(`ApiService GET: ${url} avec params:`, params.toString());\n    return this.http.get<T>(url, { params });\n  }\n\n  /**\n   * Effectue une requête HTTP POST\n   * @param path Chemin de l'API (sans le préfixe de base)\n   * @param body Corps de la requête\n   * @returns Observable avec les données\n   */\n  post<T>(path: string, body: any): Observable<T> {\n    return this.http.post<T>(`${this.apiUrl}${this.apiPrefix}${path}`, body);\n  }\n\n  /**\n   * Effectue une requête HTTP PUT\n   * @param path Chemin de l'API (sans le préfixe de base)\n   * @param body Corps de la requête\n   * @returns Observable avec les données\n   */\n  put<T>(path: string, body: any): Observable<T> {\n    return this.http.put<T>(`${this.apiUrl}${this.apiPrefix}${path}`, body);\n  }\n\n  /**\n   * Effectue une requête HTTP PATCH\n   * @param path Chemin de l'API (sans le préfixe de base)\n   * @param body Corps de la requête\n   * @returns Observable avec les données\n   */\n  patch<T>(path: string, body: any): Observable<T> {\n    return this.http.patch<T>(`${this.apiUrl}${this.apiPrefix}${path}`, body);\n  }\n\n  /**\n   * Effectue une requête HTTP DELETE\n   * @param path Chemin de l'API (sans le préfixe de base)\n   * @returns Observable avec les données\n   */\n  delete<T>(path: string): Observable<T> {\n    return this.http.delete<T>(`${this.apiUrl}${this.apiPrefix}${path}`);\n  }\n\n  /**\n   * Effectue une requête HTTP POST avec FormData (pour l'upload de fichiers)\n   * @param path Chemin de l'API (sans le préfixe de base)\n   * @param formData Objet FormData contenant les fichiers et autres données\n   * @returns Observable avec les données\n   */\n  postFormData<T>(path: string, formData: FormData): Observable<T> {\n    const url = `${this.apiUrl}${this.apiPrefix}${path}`;\n    console.log(`ApiService POST FormData: ${url}`);\n    return this.http.post<T>(url, formData);\n  }\n} "],
  "mappings": ";;;;;;;;;;;AAQM,IAAO,aAAP,MAAO,YAAU;EAIrB,YAAoB,MAAgB;AAAhB,SAAA,OAAA;AAHZ,SAAA,SAAS,YAAY;AACrB,SAAA,YAAY;EAEmB;;;;;;;EAQvC,IAAO,MAAc,SAAqB,IAAI,WAAU,GAAE;AACxD,UAAM,MAAM,GAAG,KAAK,MAAM,GAAG,KAAK,SAAS,GAAG,IAAI;AAClD,YAAQ,IAAI,mBAAmB,GAAG,iBAAiB,OAAO,SAAQ,CAAE;AACpE,WAAO,KAAK,KAAK,IAAO,KAAK,EAAE,OAAM,CAAE;EACzC;;;;;;;EAQA,KAAQ,MAAc,MAAS;AAC7B,WAAO,KAAK,KAAK,KAAQ,GAAG,KAAK,MAAM,GAAG,KAAK,SAAS,GAAG,IAAI,IAAI,IAAI;EACzE;;;;;;;EAQA,IAAO,MAAc,MAAS;AAC5B,WAAO,KAAK,KAAK,IAAO,GAAG,KAAK,MAAM,GAAG,KAAK,SAAS,GAAG,IAAI,IAAI,IAAI;EACxE;;;;;;;EAQA,MAAS,MAAc,MAAS;AAC9B,WAAO,KAAK,KAAK,MAAS,GAAG,KAAK,MAAM,GAAG,KAAK,SAAS,GAAG,IAAI,IAAI,IAAI;EAC1E;;;;;;EAOA,OAAU,MAAY;AACpB,WAAO,KAAK,KAAK,OAAU,GAAG,KAAK,MAAM,GAAG,KAAK,SAAS,GAAG,IAAI,EAAE;EACrE;;;;;;;EAQA,aAAgB,MAAc,UAAkB;AAC9C,UAAM,MAAM,GAAG,KAAK,MAAM,GAAG,KAAK,SAAS,GAAG,IAAI;AAClD,YAAQ,IAAI,6BAA6B,GAAG,EAAE;AAC9C,WAAO,KAAK,KAAK,KAAQ,KAAK,QAAQ;EACxC;;;uBAnEW,aAAU,mBAAA,UAAA,CAAA;IAAA;EAAA;;4EAAV,aAAU,SAAV,YAAU,WAAA,YAFT,OAAM,CAAA;EAAA;;",
  "names": []
}
