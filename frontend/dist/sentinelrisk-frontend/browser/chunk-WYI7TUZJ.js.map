{"version":3,"sources":["node_modules/@angular/material/fesm2022/badge.mjs","src/app/features/snmp/models/asset.model.ts","src/app/features/snmp/services/snmp.service.ts","src/app/features/snmp/components/asset-list/asset-list.component.ts","src/app/features/snmp/components/asset-list/asset-list.component.html","src/app/features/snmp/components/asset-form/asset-form.component.ts","src/app/features/snmp/components/asset-form/asset-form.component.html","src/app/features/snmp/components/config-list/config-list.component.ts","src/app/features/snmp/components/config-list/config-list.component.html","src/app/features/snmp/components/config-form/config-form.component.ts","src/app/features/snmp/components/config-form/config-form.component.html","src/app/features/snmp/components/manual-scan/manual-scan.component.ts","src/app/features/snmp/components/manual-scan/manual-scan.component.html","src/app/features/snmp/components/scan-history/scan-history.component.ts","src/app/features/snmp/components/scan-history/scan-history.component.html","src/app/features/snmp/components/scan-detail/scan-detail.component.ts","src/app/features/snmp/components/scan-detail/scan-detail.component.html","src/app/features/snmp/snmp-routing.module.ts","src/app/features/snmp/snmp.module.ts"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, createComponent, EnvironmentInjector, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Keeps track of the apps currently containing badges. */\nconst badgeApps = new Set();\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n  static {\n    this.ɵfac = function _MatBadgeStyleLoader_Factory(t) {\n      return new (t || _MatBadgeStyleLoader)();\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: _MatBadgeStyleLoader,\n      selectors: [[\"ng-component\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 0,\n      vars: 0,\n      template: function _MatBadgeStyleLoader_Template(rf, ctx) {},\n      styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatBadgeStyleLoader, [{\n    type: Component,\n    args: [{\n      standalone: true,\n      encapsulation: ViewEncapsulation.None,\n      template: '',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"]\n    }]\n  }], null, null);\n})();\n/** Directive to display a text badge. */\nclass MatBadge {\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  get color() {\n    return this._color;\n  }\n  set color(value) {\n    this._setColor(value);\n    this._color = value;\n  }\n  /** The content for the badge */\n  get content() {\n    return this._content;\n  }\n  set content(newContent) {\n    this._updateRenderedContent(newContent);\n  }\n  /** Message used to describe the decorated element via aria-describedby */\n  get description() {\n    return this._description;\n  }\n  set description(newDescription) {\n    this._updateDescription(newDescription);\n  }\n  constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n    this._ngZone = _ngZone;\n    this._elementRef = _elementRef;\n    this._ariaDescriber = _ariaDescriber;\n    this._renderer = _renderer;\n    this._animationMode = _animationMode;\n    this._color = 'primary';\n    /** Whether the badge should overlap its contents or not */\n    this.overlap = true;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n    this.position = 'above after';\n    /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n    this.size = 'medium';\n    /** Unique id for the badge */\n    this._id = nextId++;\n    /** Whether the OnInit lifecycle hook has run yet */\n    this._isInitialized = false;\n    /** InteractivityChecker to determine if the badge host is focusable. */\n    this._interactivityChecker = inject(InteractivityChecker);\n    this._document = inject(DOCUMENT);\n    const appRef = inject(ApplicationRef);\n    if (!badgeApps.has(appRef)) {\n      badgeApps.add(appRef);\n      const componentRef = createComponent(_MatBadgeStyleLoader, {\n        environmentInjector: inject(EnvironmentInjector)\n      });\n      appRef.onDestroy(() => {\n        badgeApps.delete(appRef);\n        if (badgeApps.size === 0) {\n          componentRef.destroy();\n        }\n      });\n    }\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      const nativeElement = _elementRef.nativeElement;\n      if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n        throw Error('matBadge must be attached to an element node.');\n      }\n      const matIconTagName = 'mat-icon';\n      // Heads-up for developers to avoid putting matBadge on <mat-icon>\n      // as it is aria-hidden by default docs mention this at:\n      // https://material.angular.io/components/badge/overview#accessibility\n      if (nativeElement.tagName.toLowerCase() === matIconTagName && nativeElement.getAttribute('aria-hidden') === 'true') {\n        console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` + `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` + `\\n${nativeElement.outerHTML}`);\n      }\n    }\n  }\n  /** Whether the badge is above the host or not */\n  isAbove() {\n    return this.position.indexOf('below') === -1;\n  }\n  /** Whether the badge is after the host or not */\n  isAfter() {\n    return this.position.indexOf('before') === -1;\n  }\n  /**\n   * Gets the element into which the badge's content is being rendered. Undefined if the element\n   * hasn't been created (e.g. if the badge doesn't have content).\n   */\n  getBadgeElement() {\n    return this._badgeElement;\n  }\n  ngOnInit() {\n    // We may have server-side rendered badge that we need to clear.\n    // We need to do this in ngOnInit because the full content of the component\n    // on which the badge is attached won't necessarily be in the DOM until this point.\n    this._clearExistingBadges();\n    if (this.content && !this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n      this._updateRenderedContent(this.content);\n    }\n    this._isInitialized = true;\n  }\n  ngOnDestroy() {\n    // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n    // We have to destroy it ourselves, otherwise it'll be retained in memory.\n    if (this._renderer.destroyNode) {\n      this._renderer.destroyNode(this._badgeElement);\n      this._inlineBadgeDescription?.remove();\n    }\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n  }\n  /** Gets whether the badge's host element is interactive. */\n  _isHostInteractive() {\n    // Ignore visibility since it requires an expensive style caluclation.\n    return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n      ignoreVisibility: true\n    });\n  }\n  /** Creates the badge element */\n  _createBadgeElement() {\n    const badgeElement = this._renderer.createElement('span');\n    const activeClass = 'mat-badge-active';\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    // The badge is aria-hidden because we don't want it to appear in the page's navigation\n    // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n    badgeElement.setAttribute('aria-hidden', 'true');\n    badgeElement.classList.add(BADGE_CONTENT_CLASS);\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n    this._elementRef.nativeElement.appendChild(badgeElement);\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n    return badgeElement;\n  }\n  /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n  _updateRenderedContent(newContent) {\n    const newContentNormalized = `${newContent ?? ''}`.trim();\n    // Don't create the badge element if the directive isn't initialized because we want to\n    // append the badge element to the *end* of the host element's content for backwards\n    // compatibility.\n    if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    }\n    if (this._badgeElement) {\n      this._badgeElement.textContent = newContentNormalized;\n    }\n    this._content = newContentNormalized;\n  }\n  /** Updates the host element's aria description via AriaDescriber. */\n  _updateDescription(newDescription) {\n    // Always start by removing the aria-describedby; we will add a new one if necessary.\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    // NOTE: We only check whether the host is interactive here, which happens during\n    // when then badge content changes. It is possible that the host changes\n    // interactivity status separate from one of these. However, watching the interactivity\n    // status of the host would require a `MutationObserver`, which is likely more code + overhead\n    // than it's worth; from usages inside Google, we see that the vats majority of badges either\n    // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n    if (!newDescription || this._isHostInteractive()) {\n      this._removeInlineDescription();\n    }\n    this._description = newDescription;\n    // We don't add `aria-describedby` for non-interactive hosts elements because we\n    // instead insert the description inline.\n    if (this._isHostInteractive()) {\n      this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n    } else {\n      this._updateInlineDescription();\n    }\n  }\n  _updateInlineDescription() {\n    // Create the inline description element if it doesn't exist\n    if (!this._inlineBadgeDescription) {\n      this._inlineBadgeDescription = this._document.createElement('span');\n      this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n    }\n    this._inlineBadgeDescription.textContent = this.description;\n    this._badgeElement?.appendChild(this._inlineBadgeDescription);\n  }\n  _removeInlineDescription() {\n    this._inlineBadgeDescription?.remove();\n    this._inlineBadgeDescription = undefined;\n  }\n  /** Adds css theme class given the color to the component host */\n  _setColor(colorPalette) {\n    const classList = this._elementRef.nativeElement.classList;\n    classList.remove(`mat-badge-${this._color}`);\n    if (colorPalette) {\n      classList.add(`mat-badge-${colorPalette}`);\n    }\n  }\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  _clearExistingBadges() {\n    // Only check direct children of this host element in order to avoid deleting\n    // any badges that might exist in descendant elements.\n    const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n    for (const badgeElement of Array.from(badges)) {\n      if (badgeElement !== this._badgeElement) {\n        badgeElement.remove();\n      }\n    }\n  }\n  static {\n    this.ɵfac = function MatBadge_Factory(t) {\n      return new (t || MatBadge)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.AriaDescriber), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatBadge,\n      selectors: [[\"\", \"matBadge\", \"\"]],\n      hostAttrs: [1, \"mat-badge\"],\n      hostVars: 20,\n      hostBindings: function MatBadge_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx.content)(\"mat-badge-disabled\", ctx.disabled);\n        }\n      },\n      inputs: {\n        color: [i0.ɵɵInputFlags.None, \"matBadgeColor\", \"color\"],\n        overlap: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"matBadgeOverlap\", \"overlap\", booleanAttribute],\n        disabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"matBadgeDisabled\", \"disabled\", booleanAttribute],\n        position: [i0.ɵɵInputFlags.None, \"matBadgePosition\", \"position\"],\n        content: [i0.ɵɵInputFlags.None, \"matBadge\", \"content\"],\n        description: [i0.ɵɵInputFlags.None, \"matBadgeDescription\", \"description\"],\n        size: [i0.ɵɵInputFlags.None, \"matBadgeSize\", \"size\"],\n        hidden: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"matBadgeHidden\", \"hidden\", booleanAttribute]\n      },\n      standalone: true,\n      features: [i0.ɵɵInputTransformsFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatBadge, [{\n    type: Directive,\n    args: [{\n      selector: '[matBadge]',\n      host: {\n        'class': 'mat-badge',\n        '[class.mat-badge-overlap]': 'overlap',\n        '[class.mat-badge-above]': 'isAbove()',\n        '[class.mat-badge-below]': '!isAbove()',\n        '[class.mat-badge-before]': '!isAfter()',\n        '[class.mat-badge-after]': 'isAfter()',\n        '[class.mat-badge-small]': 'size === \"small\"',\n        '[class.mat-badge-medium]': 'size === \"medium\"',\n        '[class.mat-badge-large]': 'size === \"large\"',\n        '[class.mat-badge-hidden]': 'hidden || !content',\n        '[class.mat-badge-disabled]': 'disabled'\n      },\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.NgZone\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: i1.AriaDescriber\n  }, {\n    type: i0.Renderer2\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }], {\n    color: [{\n      type: Input,\n      args: ['matBadgeColor']\n    }],\n    overlap: [{\n      type: Input,\n      args: [{\n        alias: 'matBadgeOverlap',\n        transform: booleanAttribute\n      }]\n    }],\n    disabled: [{\n      type: Input,\n      args: [{\n        alias: 'matBadgeDisabled',\n        transform: booleanAttribute\n      }]\n    }],\n    position: [{\n      type: Input,\n      args: ['matBadgePosition']\n    }],\n    content: [{\n      type: Input,\n      args: ['matBadge']\n    }],\n    description: [{\n      type: Input,\n      args: ['matBadgeDescription']\n    }],\n    size: [{\n      type: Input,\n      args: ['matBadgeSize']\n    }],\n    hidden: [{\n      type: Input,\n      args: [{\n        alias: 'matBadgeHidden',\n        transform: booleanAttribute\n      }]\n    }]\n  });\n})();\nclass MatBadgeModule {\n  static {\n    this.ɵfac = function MatBadgeModule_Factory(t) {\n      return new (t || MatBadgeModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MatBadgeModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [A11yModule, MatCommonModule, MatCommonModule]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatBadgeModule, [{\n    type: NgModule,\n    args: [{\n      // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n      // but it seems to be necessary for tests.\n      imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n      exports: [MatBadge, MatCommonModule]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n","export interface Asset {\n  id?: number;\n  hostname?: string;\n  ipAddress?: string;\n  type: AssetType;\n  snmpVersion: SnmpVersion;\n  port: number;\n  community?: string;\n  username?: string;\n  authProtocol?: string;\n  authPassword?: string;\n  privProtocol?: string;\n  privPassword?: string;\n  active: boolean;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\nexport enum AssetType {\n  SERVER = 'SERVER',\n  PC = 'PC',\n  SWITCH = 'SWITCH',\n  ROUTER = 'ROUTER',\n  PRINTER = 'PRINTER',\n  FIREWALL = 'FIREWALL',\n  OTHER = 'OTHER'\n}\n\nexport enum SnmpVersion {\n  V1 = 'V1',\n  V2C = 'V2C',\n  V3 = 'V3'\n}\n\nexport interface AssetCreateRequest {\n  hostname?: string;\n  ipAddress?: string;\n  type: AssetType;\n  snmpVersion: SnmpVersion;\n  port?: number;\n  community?: string;\n  username?: string;\n  authProtocol?: string;\n  authPassword?: string;\n  privProtocol?: string;\n  privPassword?: string;\n  active?: boolean;\n} ","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../../../environments/environment';\nimport { Asset, AssetCreateRequest, AssetType } from '../models/asset.model';\nimport { SnmpScanConfig, ScanConfigCreateRequest } from '../models/scan-config.model';\nimport { SnmpScanResult, ScanStatus, ScanResultFilter } from '../models/scan-result.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SnmpService {\n  private readonly baseUrl = `${environment.apiUrl}/api/snmp`;\n\n  constructor(private http: HttpClient) {}\n\n  // ===== ASSETS =====\n\n  /**\n   * Récupère tous les assets\n   */\n  getAllAssets(): Observable<Asset[]> {\n    return this.http.get<Asset[]>(`${this.baseUrl}/assets`);\n  }\n\n  /**\n   * Récupère un asset par son ID\n   */\n  getAssetById(id: number): Observable<Asset> {\n    return this.http.get<Asset>(`${this.baseUrl}/assets/${id}`);\n  }\n\n  /**\n   * Récupère les assets actifs\n   */\n  getActiveAssets(): Observable<Asset[]> {\n    return this.http.get<Asset[]>(`${this.baseUrl}/assets/active`);\n  }\n\n  /**\n   * Récupère les assets par type\n   */\n  getAssetsByType(type: AssetType): Observable<Asset[]> {\n    return this.http.get<Asset[]>(`${this.baseUrl}/assets/type/${type}`);\n  }\n\n  /**\n   * Crée un nouvel asset\n   */\n  createAsset(asset: AssetCreateRequest): Observable<Asset> {\n    return this.http.post<Asset>(`${this.baseUrl}/assets`, asset);\n  }\n\n  /**\n   * Met à jour un asset existant\n   */\n  updateAsset(id: number, asset: AssetCreateRequest): Observable<Asset> {\n    return this.http.put<Asset>(`${this.baseUrl}/assets/${id}`, asset);\n  }\n\n  /**\n   * Supprime un asset\n   */\n  deleteAsset(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.baseUrl}/assets/${id}`);\n  }\n\n  /**\n   * Active/désactive un asset\n   */\n  toggleAssetStatus(id: number): Observable<Asset> {\n    return this.http.patch<Asset>(`${this.baseUrl}/assets/${id}/toggle-status`, {});\n  }\n\n  /**\n   * Récupère les statistiques des assets par type\n   */\n  getAssetStatistics(): Observable<any[]> {\n    return this.http.get<any[]>(`${this.baseUrl}/assets/statistics/by-type`);\n  }\n\n  // ===== CONFIGURATIONS =====\n\n  /**\n   * Récupère toutes les configurations\n   */\n  getAllConfigs(): Observable<SnmpScanConfig[]> {\n    return this.http.get<SnmpScanConfig[]>(`${this.baseUrl}/configs`);\n  }\n\n  /**\n   * Récupère une configuration par son ID\n   */\n  getConfigById(id: number): Observable<SnmpScanConfig> {\n    return this.http.get<SnmpScanConfig>(`${this.baseUrl}/configs/${id}`);\n  }\n\n  /**\n   * Récupère les configurations actives\n   */\n  getActiveConfigs(): Observable<SnmpScanConfig[]> {\n    return this.http.get<SnmpScanConfig[]>(`${this.baseUrl}/configs/active`);\n  }\n\n  /**\n   * Récupère les configurations par asset\n   */\n  getConfigsByAsset(assetId: number): Observable<SnmpScanConfig[]> {\n    return this.http.get<SnmpScanConfig[]>(`${this.baseUrl}/configs/asset/${assetId}`);\n  }\n\n  /**\n   * Crée une nouvelle configuration\n   */\n  createConfig(config: ScanConfigCreateRequest): Observable<SnmpScanConfig> {\n    return this.http.post<SnmpScanConfig>(`${this.baseUrl}/configs`, config);\n  }\n\n  /**\n   * Met à jour une configuration existante\n   */\n  updateConfig(id: number, config: ScanConfigCreateRequest): Observable<SnmpScanConfig> {\n    return this.http.put<SnmpScanConfig>(`${this.baseUrl}/configs/${id}`, config);\n  }\n\n  /**\n   * Supprime une configuration\n   */\n  deleteConfig(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.baseUrl}/configs/${id}`);\n  }\n\n  /**\n   * Lance un scan manuel\n   */\n  runManualScan(configId: number): Observable<SnmpScanResult> {\n    return this.http.post<SnmpScanResult>(`${this.baseUrl}/configs/${configId}/run`, {});\n  }\n\n  /**\n   * Active/désactive une configuration\n   */\n  toggleConfigStatus(id: number): Observable<SnmpScanConfig> {\n    return this.http.patch<SnmpScanConfig>(`${this.baseUrl}/configs/${id}/toggle-status`, {});\n  }\n\n  // ===== RÉSULTATS =====\n\n  /**\n   * Récupère tous les résultats avec pagination\n   */\n  getAllResults(page: number = 0, size: number = 20): Observable<any> {\n    const params = new HttpParams()\n      .set('page', page.toString())\n      .set('size', size.toString());\n    return this.http.get<any>(`${this.baseUrl}/results`, { params });\n  }\n\n  /**\n   * Récupère un résultat par son ID\n   */\n  getResultById(id: number): Observable<SnmpScanResult> {\n    return this.http.get<SnmpScanResult>(`${this.baseUrl}/results/${id}`);\n  }\n\n  /**\n   * Récupère les résultats par asset\n   */\n  getResultsByAsset(assetId: number, page: number = 0, size: number = 20): Observable<SnmpScanResult[]> {\n    const params = new HttpParams()\n      .set('page', page.toString())\n      .set('size', size.toString());\n    return this.http.get<SnmpScanResult[]>(`${this.baseUrl}/results/asset/${assetId}`, { params });\n  }\n\n  /**\n   * Récupère les résultats par configuration\n   */\n  getResultsByConfig(configId: number, page: number = 0, size: number = 20): Observable<SnmpScanResult[]> {\n    const params = new HttpParams()\n      .set('page', page.toString())\n      .set('size', size.toString());\n    return this.http.get<SnmpScanResult[]>(`${this.baseUrl}/results/config/${configId}`, { params });\n  }\n\n  /**\n   * Récupère les résultats par statut\n   */\n  getResultsByStatus(status: ScanStatus, page: number = 0, size: number = 20): Observable<SnmpScanResult[]> {\n    const params = new HttpParams()\n      .set('page', page.toString())\n      .set('size', size.toString());\n    return this.http.get<SnmpScanResult[]>(`${this.baseUrl}/results/status/${status}`, { params });\n  }\n\n  /**\n   * Récupère le dernier résultat pour un asset\n   */\n  getLatestResultByAsset(assetId: number): Observable<SnmpScanResult> {\n    return this.http.get<SnmpScanResult>(`${this.baseUrl}/results/latest/asset/${assetId}`);\n  }\n\n  /**\n   * Récupère le dernier résultat pour une configuration\n   */\n  getLatestResultByConfig(configId: number): Observable<SnmpScanResult> {\n    return this.http.get<SnmpScanResult>(`${this.baseUrl}/results/latest/config/${configId}`);\n  }\n\n  /**\n   * Récupère le taux de succès des scans\n   */\n  getSuccessRate(): Observable<number> {\n    return this.http.get<number>(`${this.baseUrl}/results/statistics/success-rate`);\n  }\n\n  /**\n   * Récupère les statistiques par statut\n   */\n  getResultStatistics(): Observable<any[]> {\n    return this.http.get<any[]>(`${this.baseUrl}/results/statistics/by-status`);\n  }\n\n  /**\n   * Test de connexion SNMP\n   */\n  testConnection(assetData: any): Observable<{success: boolean, error?: string}> {\n    return this.http.post<{success: boolean, error?: string}>(`${this.baseUrl}/assets/test-connection`, assetData);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Asset, AssetType } from '../../models/asset.model';\nimport { SnmpService } from '../../services/snmp.service';\n\n@Component({\n  selector: 'app-asset-list',\n  templateUrl: './asset-list.component.html',\n  styleUrls: ['./asset-list.component.css']\n})\nexport class AssetListComponent implements OnInit {\n  assets: Asset[] = [];\n  loading = false;\n  displayedColumns: string[] = ['hostname', 'ipAddress', 'type', 'snmpVersion', 'active', 'actions'];\n\n  constructor(\n    private snmpService: SnmpService,\n    private router: Router,\n    private snackBar: MatSnackBar\n  ) {}\n\n  ngOnInit(): void {\n    this.loadAssets();\n  }\n\n  loadAssets(): void {\n    this.loading = true;\n    this.snmpService.getAllAssets().subscribe({\n      next: (assets) => {\n        this.assets = assets;\n        this.loading = false;\n      },\n      error: (error) => {\n        console.error('Erreur lors du chargement des assets:', error);\n        this.snackBar.open('Erreur lors du chargement des assets', 'Fermer', {\n          duration: 3000\n        });\n        this.loading = false;\n      }\n    });\n  }\n\n  createAsset(): void {\n    this.router.navigate(['/snmp/assets/new']);\n  }\n\n  editAsset(asset: Asset): void {\n    this.router.navigate(['/snmp/assets/edit', asset.id]);\n  }\n\n  toggleAssetStatus(asset: Asset): void {\n    if (!asset.id) return;\n    \n    this.snmpService.toggleAssetStatus(asset.id).subscribe({\n      next: (updatedAsset) => {\n        const index = this.assets.findIndex(a => a.id === updatedAsset.id);\n        if (index !== -1) {\n          this.assets[index] = updatedAsset;\n        }\n        this.snackBar.open(\n          `Asset ${updatedAsset.active ? 'activé' : 'désactivé'}`, \n          'Fermer', \n          { duration: 3000 }\n        );\n      },\n      error: (error) => {\n        console.error('Erreur lors du changement de statut:', error);\n        this.snackBar.open('Erreur lors du changement de statut', 'Fermer', {\n          duration: 3000\n        });\n      }\n    });\n  }\n\n  deleteAsset(asset: Asset): void {\n    if (!asset.id) return;\n    \n    if (confirm(`Êtes-vous sûr de vouloir supprimer l'asset ${asset.hostname || asset.ipAddress} ?`)) {\n      this.snmpService.deleteAsset(asset.id).subscribe({\n        next: () => {\n          this.assets = this.assets.filter(a => a.id !== asset.id);\n          this.snackBar.open('Asset supprimé avec succès', 'Fermer', {\n            duration: 3000\n          });\n        },\n        error: (error) => {\n          console.error('Erreur lors de la suppression:', error);\n          this.snackBar.open('Erreur lors de la suppression', 'Fermer', {\n            duration: 3000\n          });\n        }\n      });\n    }\n  }\n\n  getAssetTypeLabel(type: AssetType): string {\n    const labels: { [key in AssetType]: string } = {\n      [AssetType.SERVER]: 'Serveur',\n      [AssetType.PC]: 'PC',\n      [AssetType.SWITCH]: 'Switch',\n      [AssetType.ROUTER]: 'Routeur',\n      [AssetType.PRINTER]: 'Imprimante',\n      [AssetType.FIREWALL]: 'Firewall',\n      [AssetType.OTHER]: 'Autre'\n    };\n    return labels[type] || type;\n  }\n}\n","<div class=\"asset-list-container\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>\n        <mat-icon>devices</mat-icon>\n        Assets SNMP\n      </mat-card-title>\n      <div class=\"header-actions\">\n        <button mat-raised-button color=\"primary\" (click)=\"createAsset()\">\n          <mat-icon>add</mat-icon>\n          Nouvel Asset\n        </button>\n      </div>\n    </mat-card-header>\n\n    <mat-card-content>\n      <div *ngIf=\"loading\" class=\"loading-container\">\n        <mat-spinner></mat-spinner>\n        <p>Chargement des assets...</p>\n      </div>\n\n      <div *ngIf=\"!loading && assets.length === 0\" class=\"empty-state\">\n        <mat-icon>devices_off</mat-icon>\n        <h3>Aucun asset configuré</h3>\n        <p>Commencez par ajouter votre premier asset SNMP</p>\n        <button mat-raised-button color=\"primary\" (click)=\"createAsset()\">\n          <mat-icon>add</mat-icon>\n          Ajouter un asset\n        </button>\n      </div>\n\n      <div *ngIf=\"!loading && assets.length > 0\" class=\"table-container\">\n        <table mat-table [dataSource]=\"assets\" class=\"assets-table\">\n          <!-- Hostname Column -->\n          <ng-container matColumnDef=\"hostname\">\n            <th mat-header-cell *matHeaderCellDef>Hostname</th>\n            <td mat-cell *matCellDef=\"let asset\">\n              {{ asset.hostname || '-' }}\n            </td>\n          </ng-container>\n\n          <!-- IP Address Column -->\n          <ng-container matColumnDef=\"ipAddress\">\n            <th mat-header-cell *matHeaderCellDef>Adresse IP</th>\n            <td mat-cell *matCellDef=\"let asset\">\n              {{ asset.ipAddress || '-' }}\n            </td>\n          </ng-container>\n\n          <!-- Type Column -->\n          <ng-container matColumnDef=\"type\">\n            <th mat-header-cell *matHeaderCellDef>Type</th>\n            <td mat-cell *matCellDef=\"let asset\">\n              <mat-chip [color]=\"'primary'\" selected>\n                {{ getAssetTypeLabel(asset.type) }}\n              </mat-chip>\n            </td>\n          </ng-container>\n\n          <!-- SNMP Version Column -->\n          <ng-container matColumnDef=\"snmpVersion\">\n            <th mat-header-cell *matHeaderCellDef>Version SNMP</th>\n            <td mat-cell *matCellDef=\"let asset\">\n              <mat-chip [color]=\"asset.snmpVersion === 'V3' ? 'accent' : 'warn'\" selected>\n                {{ asset.snmpVersion }}\n              </mat-chip>\n            </td>\n          </ng-container>\n\n          <!-- Active Column -->\n          <ng-container matColumnDef=\"active\">\n            <th mat-header-cell *matHeaderCellDef>Statut</th>\n            <td mat-cell *matCellDef=\"let asset\">\n              <mat-chip [color]=\"asset.active ? 'primary' : 'warn'\" selected>\n                {{ asset.active ? 'Actif' : 'Inactif' }}\n              </mat-chip>\n            </td>\n          </ng-container>\n\n          <!-- Actions Column -->\n          <ng-container matColumnDef=\"actions\">\n            <th mat-header-cell *matHeaderCellDef>Actions</th>\n            <td mat-cell *matCellDef=\"let asset\">\n              <button mat-icon-button \n                      [color]=\"asset.active ? 'warn' : 'primary'\"\n                      (click)=\"toggleAssetStatus(asset)\"\n                      [matTooltip]=\"asset.active ? 'Désactiver' : 'Activer'\">\n                <mat-icon>{{ asset.active ? 'pause' : 'play_arrow' }}</mat-icon>\n              </button>\n              \n              <button mat-icon-button \n                      color=\"primary\"\n                      (click)=\"editAsset(asset)\"\n                      matTooltip=\"Modifier\">\n                <mat-icon>edit</mat-icon>\n              </button>\n              \n              <button mat-icon-button \n                      color=\"warn\"\n                      (click)=\"deleteAsset(asset)\"\n                      matTooltip=\"Supprimer\">\n                <mat-icon>delete</mat-icon>\n              </button>\n            </td>\n          </ng-container>\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n        </table>\n      </div>\n    </mat-card-content>\n  </mat-card>\n</div>\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { SnmpService } from '../../services/snmp.service';\nimport { Asset, AssetType, SnmpVersion } from '../../models/asset.model';\n\n@Component({\n  selector: 'app-asset-form',\n  templateUrl: './asset-form.component.html',\n  styleUrls: ['./asset-form.component.scss']\n})\nexport class AssetFormComponent implements OnInit {\n  assetForm!: FormGroup;\n  isEditMode = false;\n  isLoading = false;\n  isTestingConnection = false;\n  \n  assetTypes = Object.values(AssetType);\n  snmpVersions = Object.values(SnmpVersion);\n  \n  authProtocols = ['MD5', 'SHA', 'SHA224', 'SHA256', 'SHA384', 'SHA512'];\n  privProtocols = ['DES', '3DES', 'AES128', 'AES192', 'AES256'];\n\n  constructor(\n    private fb: FormBuilder,\n    private snmpService: SnmpService,\n    private snackBar: MatSnackBar,\n    private dialogRef: MatDialogRef<AssetFormComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: { asset?: Asset }\n  ) {\n    this.isEditMode = !!data?.asset;\n    this.createForm();\n  }\n\n  ngOnInit(): void {\n    if (this.isEditMode && this.data.asset) {\n      this.populateForm(this.data.asset);\n    }\n    \n    // Écouter les changements de version SNMP pour ajuster les validations\n    this.assetForm.get('snmpVersion')?.valueChanges.subscribe(version => {\n      this.updateValidatorsForSnmpVersion(version);\n    });\n  }\n\n  private createForm(): void {\n    this.assetForm = this.fb.group({\n      hostname: ['', [this.hostnameValidator]],\n      ipAddress: ['', [this.ipAddressValidator]],\n      type: ['', [Validators.required]],\n      snmpVersion: ['', [Validators.required]],\n      port: [161, [Validators.required, Validators.min(1), Validators.max(65535)]],\n      \n      // SNMP v1/v2c\n      community: [''],\n      \n      // SNMP v3\n      username: [''],\n      authProtocol: [''],\n      authPassword: [''],\n      privProtocol: [''],\n      privPassword: [''],\n      \n      description: ['', [Validators.maxLength(500)]],\n      active: [true]\n    }, { validators: [this.hostnameOrIpValidator] });\n  }\n\n  private populateForm(asset: Asset): void {\n    this.assetForm.patchValue({\n      hostname: asset.hostname,\n      ipAddress: asset.ipAddress,\n      type: asset.type,\n      snmpVersion: asset.snmpVersion,\n      port: asset.port,\n      community: asset.community,\n      username: asset.username,\n      authProtocol: asset.authProtocol,\n      authPassword: asset.authPassword,\n      privProtocol: asset.privProtocol,\n      privPassword: asset.privPassword,\n      active: asset.active\n    });\n  }\n\n  private updateValidatorsForSnmpVersion(version: SnmpVersion): void {\n    const communityControl = this.assetForm.get('community');\n    const snmpV3UserControl = this.assetForm.get('snmpV3User');\n    const authProtocolControl = this.assetForm.get('authProtocol');\n    const authPassControl = this.assetForm.get('authPass');\n    const privProtocolControl = this.assetForm.get('privProtocol');\n    const privPassControl = this.assetForm.get('privPass');\n\n    // Réinitialiser les validateurs\n    communityControl?.clearValidators();\n    snmpV3UserControl?.clearValidators();\n    authProtocolControl?.clearValidators();\n    authPassControl?.clearValidators();\n    privProtocolControl?.clearValidators();\n    privPassControl?.clearValidators();\n\n    if (version === SnmpVersion.V1 || version === SnmpVersion.V2C) {\n      // SNMP v1/v2c : community obligatoire\n      communityControl?.setValidators([Validators.required, Validators.maxLength(100)]);\n    } else if (version === SnmpVersion.V3) {\n      // SNMP v3 : utilisateur obligatoire\n      snmpV3UserControl?.setValidators([Validators.required, Validators.maxLength(50)]);\n      \n      // Si auth protocol est défini, auth pass est obligatoire\n      if (this.assetForm.get('authProtocol')?.value) {\n        authPassControl?.setValidators([Validators.required, Validators.minLength(8), Validators.maxLength(100)]);\n      }\n      \n      // Si priv protocol est défini, priv pass est obligatoire\n      if (this.assetForm.get('privProtocol')?.value) {\n        privPassControl?.setValidators([Validators.required, Validators.minLength(8), Validators.maxLength(100)]);\n      }\n    }\n\n    // Mettre à jour la validation\n    communityControl?.updateValueAndValidity();\n    snmpV3UserControl?.updateValueAndValidity();\n    authProtocolControl?.updateValueAndValidity();\n    authPassControl?.updateValueAndValidity();\n    privProtocolControl?.updateValueAndValidity();\n    privPassControl?.updateValueAndValidity();\n  }\n\n  // Validateurs personnalisés\n  private hostnameValidator(control: AbstractControl): {[key: string]: any} | null {\n    if (!control.value) return null;\n    \n    const hostnameRegex = /^[a-zA-Z0-9.-]+$/;\n    if (!hostnameRegex.test(control.value)) {\n      return { 'invalidHostname': true };\n    }\n    \n    if (control.value.length > 255) {\n      return { 'maxlength': true };\n    }\n    \n    return null;\n  }\n\n  private ipAddressValidator(control: AbstractControl): {[key: string]: any} | null {\n    if (!control.value) return null;\n    \n    const ipRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n    if (!ipRegex.test(control.value)) {\n      return { 'invalidIpAddress': true };\n    }\n    \n    return null;\n  }\n\n  private hostnameOrIpValidator(form: AbstractControl): {[key: string]: any} | null {\n    const hostname = form.get('hostname')?.value;\n    const ipAddress = form.get('ipAddress')?.value;\n    \n    if (!hostname && !ipAddress) {\n      return { 'hostnameOrIpRequired': true };\n    }\n    \n    return null;\n  }\n\n  onAuthProtocolChange(): void {\n    const authProtocol = this.assetForm.get('authProtocol')?.value;\n    const authPassControl = this.assetForm.get('authPass');\n    \n    if (authProtocol) {\n      authPassControl?.setValidators([Validators.required, Validators.minLength(8), Validators.maxLength(100)]);\n    } else {\n      authPassControl?.clearValidators();\n      authPassControl?.setValue('');\n    }\n    authPassControl?.updateValueAndValidity();\n  }\n\n  onPrivProtocolChange(): void {\n    const privProtocol = this.assetForm.get('privProtocol')?.value;\n    const privPassControl = this.assetForm.get('privPass');\n    \n    if (privProtocol) {\n      privPassControl?.setValidators([Validators.required, Validators.minLength(8), Validators.maxLength(100)]);\n    } else {\n      privPassControl?.clearValidators();\n      privPassControl?.setValue('');\n    }\n    privPassControl?.updateValueAndValidity();\n  }\n\n  async testConnection(): Promise<void> {\n    if (this.assetForm.invalid) {\n      this.snackBar.open('Veuillez corriger les erreurs du formulaire avant de tester la connexion', 'Fermer', {\n        duration: 5000,\n        panelClass: ['error-snackbar']\n      });\n      return;\n    }\n\n    this.isTestingConnection = true;\n    \n    try {\n      const assetData = this.assetForm.value;\n      const testResult = await this.snmpService.testConnection(assetData).toPromise();\n      \n      if (testResult?.success) {\n        this.snackBar.open('✅ Connexion SNMP réussie !', 'Fermer', {\n          duration: 3000,\n          panelClass: ['success-snackbar']\n        });\n      } else {\n        this.snackBar.open(`❌ Échec de la connexion : ${testResult?.error || 'Erreur inconnue'}`, 'Fermer', {\n          duration: 5000,\n          panelClass: ['error-snackbar']\n        });\n      }\n    } catch (error) {\n      this.snackBar.open('❌ Erreur lors du test de connexion', 'Fermer', {\n        duration: 5000,\n        panelClass: ['error-snackbar']\n      });\n    } finally {\n      this.isTestingConnection = false;\n    }\n  }\n\n  onSubmit(): void {\n    if (this.assetForm.invalid) {\n      this.markFormGroupTouched();\n      return;\n    }\n\n    this.isLoading = true;\n    const assetData = this.assetForm.value;\n\n    const operation = this.isEditMode \n      ? this.snmpService.updateAsset(this.data.asset!.id!, assetData)\n      : this.snmpService.createAsset(assetData);\n\n    operation.subscribe({\n      next: (asset) => {\n        const message = this.isEditMode ? 'Asset mis à jour avec succès' : 'Asset créé avec succès';\n        this.snackBar.open(message, 'Fermer', {\n          duration: 3000,\n          panelClass: ['success-snackbar']\n        });\n        this.dialogRef.close(asset);\n      },\n      error: (error) => {\n        console.error('Erreur lors de la sauvegarde:', error);\n        this.snackBar.open('Erreur lors de la sauvegarde de l\\'asset', 'Fermer', {\n          duration: 5000,\n          panelClass: ['error-snackbar']\n        });\n        this.isLoading = false;\n      }\n    });\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n\n  private markFormGroupTouched(): void {\n    Object.keys(this.assetForm.controls).forEach(key => {\n      const control = this.assetForm.get(key);\n      control?.markAsTouched();\n    });\n  }\n\n  getErrorMessage(fieldName: string): string {\n    const control = this.assetForm.get(fieldName);\n    if (!control || !control.errors || !control.touched) return '';\n\n    const errors = control.errors;\n    \n    if (errors['required']) return `${this.getFieldDisplayName(fieldName)} est obligatoire`;\n    if (errors['minlength']) return `${this.getFieldDisplayName(fieldName)} doit contenir au moins ${errors['minlength'].requiredLength} caractères`;\n    if (errors['maxlength']) return `${this.getFieldDisplayName(fieldName)} ne peut pas dépasser ${errors['maxlength'].requiredLength} caractères`;\n    if (errors['min']) return `${this.getFieldDisplayName(fieldName)} doit être supérieur à ${errors['min'].min}`;\n    if (errors['max']) return `${this.getFieldDisplayName(fieldName)} doit être inférieur à ${errors['max'].max}`;\n    if (errors['invalidHostname']) return 'Le hostname ne peut contenir que des lettres, chiffres, points et tirets';\n    if (errors['invalidIpAddress']) return 'L\\'adresse IP doit être au format IPv4 valide';\n    if (errors['hostnameOrIpRequired']) return 'Au moins un hostname ou une adresse IP doit être spécifié';\n    \n    return 'Champ invalide';\n  }\n\n  private getFieldDisplayName(fieldName: string): string {\n    const displayNames: {[key: string]: string} = {\n      'hostname': 'Hostname',\n      'ipAddress': 'Adresse IP',\n      'type': 'Type d\\'asset',\n      'snmpVersion': 'Version SNMP',\n      'port': 'Port',\n      'community': 'Community',\n      'snmpV3User': 'Utilisateur SNMP v3',\n      'authProtocol': 'Protocole d\\'authentification',\n      'authPass': 'Mot de passe d\\'authentification',\n      'privProtocol': 'Protocole de chiffrement',\n      'privPass': 'Mot de passe de chiffrement',\n      'description': 'Description'\n    };\n    \n    return displayNames[fieldName] || fieldName;\n  }\n\n  get isSnmpV3(): boolean {\n    return this.assetForm.get('snmpVersion')?.value === SnmpVersion.V3;\n  }\n\n  get isSnmpV1OrV2C(): boolean {\n    const version = this.assetForm.get('snmpVersion')?.value;\n    return version === SnmpVersion.V1 || version === SnmpVersion.V2C;\n  }\n}\n","<div class=\"asset-form-container\">\n  <h2 mat-dialog-title>\n    {{ isEditMode ? 'Modifier l\\'Asset SNMP' : 'Nouvel Asset SNMP' }}\n  </h2>\n\n  <form [formGroup]=\"assetForm\" (ngSubmit)=\"onSubmit()\" class=\"asset-form\">\n    <mat-dialog-content>\n      \n      <!-- Section Identification -->\n      <mat-card class=\"form-section\">\n        <mat-card-header>\n          <mat-card-title>Identification</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <div class=\"form-row\">\n            <mat-form-field appearance=\"outline\" class=\"full-width\">\n              <mat-label>Hostname</mat-label>\n              <input matInput formControlName=\"hostname\" placeholder=\"server01.example.com\">\n              <mat-error>{{ getErrorMessage('hostname') }}</mat-error>\n            </mat-form-field>\n          </div>\n\n          <div class=\"form-row\">\n            <mat-form-field appearance=\"outline\" class=\"full-width\">\n              <mat-label>Adresse IP</mat-label>\n              <input matInput formControlName=\"ipAddress\" placeholder=\"192.168.1.100\">\n              <mat-error>{{ getErrorMessage('ipAddress') }}</mat-error>\n            </mat-form-field>\n          </div>\n\n          <div class=\"form-row\">\n            <mat-form-field appearance=\"outline\" class=\"half-width\">\n              <mat-label>Type d'Asset</mat-label>\n              <mat-select formControlName=\"type\">\n                <mat-option *ngFor=\"let type of assetTypes\" [value]=\"type\">\n                  {{ type }}\n                </mat-option>\n              </mat-select>\n              <mat-error>{{ getErrorMessage('type') }}</mat-error>\n            </mat-form-field>\n\n            <mat-form-field appearance=\"outline\" class=\"half-width\">\n              <mat-label>Port SNMP</mat-label>\n              <input matInput type=\"number\" formControlName=\"port\" placeholder=\"161\">\n              <mat-error>{{ getErrorMessage('port') }}</mat-error>\n            </mat-form-field>\n          </div>\n\n          <div class=\"form-row\">\n            <mat-form-field appearance=\"outline\" class=\"full-width\">\n              <mat-label>Description</mat-label>\n              <textarea matInput formControlName=\"description\" rows=\"3\" \n                        placeholder=\"Description de l'asset...\"></textarea>\n              <mat-error>{{ getErrorMessage('description') }}</mat-error>\n            </mat-form-field>\n          </div>\n\n          <div class=\"form-row\">\n            <mat-checkbox formControlName=\"active\">Asset actif</mat-checkbox>\n          </div>\n        </mat-card-content>\n      </mat-card>\n\n      <!-- Section Configuration SNMP -->\n      <mat-card class=\"form-section\">\n        <mat-card-header>\n          <mat-card-title>Configuration SNMP</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n          <div class=\"form-row\">\n            <mat-form-field appearance=\"outline\" class=\"full-width\">\n              <mat-label>Version SNMP</mat-label>\n              <mat-select formControlName=\"snmpVersion\">\n                <mat-option *ngFor=\"let version of snmpVersions\" [value]=\"version\">\n                  {{ version }}\n                </mat-option>\n              </mat-select>\n              <mat-error>{{ getErrorMessage('snmpVersion') }}</mat-error>\n            </mat-form-field>\n          </div>\n\n          <!-- Configuration SNMP v1/v2c -->\n          <div *ngIf=\"isSnmpV1OrV2C\" class=\"snmp-v2c-config\">\n            <div class=\"form-row\">\n              <mat-form-field appearance=\"outline\" class=\"full-width\">\n                <mat-label>Community String</mat-label>\n                <input matInput formControlName=\"community\" placeholder=\"public\">\n                <mat-icon matSuffix>security</mat-icon>\n                <mat-error>{{ getErrorMessage('community') }}</mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n\n          <!-- Configuration SNMP v3 -->\n          <div *ngIf=\"isSnmpV3\" class=\"snmp-v3-config\">\n            <div class=\"form-row\">\n              <mat-form-field appearance=\"outline\" class=\"full-width\">\n                <mat-label>Nom d'utilisateur SNMP v3</mat-label>\n                <input matInput formControlName=\"username\" placeholder=\"admin\">\n                <mat-icon matSuffix>person</mat-icon>\n                <mat-error>{{ getErrorMessage('username') }}</mat-error>\n              </mat-form-field>\n            </div>\n\n            <div class=\"form-row\">\n              <mat-form-field appearance=\"outline\" class=\"half-width\">\n                <mat-label>Protocole d'authentification</mat-label>\n                <mat-select formControlName=\"authProtocol\" (selectionChange)=\"onAuthProtocolChange()\">\n                  <mat-option value=\"\">Aucun</mat-option>\n                  <mat-option *ngFor=\"let protocol of authProtocols\" [value]=\"protocol\">\n                    {{ protocol }}\n                  </mat-option>\n                </mat-select>\n                <mat-error>{{ getErrorMessage('authProtocol') }}</mat-error>\n              </mat-form-field>\n\n              <mat-form-field appearance=\"outline\" class=\"half-width\" \n                              *ngIf=\"assetForm.get('authProtocol')?.value\">\n                <mat-label>Mot de passe d'authentification</mat-label>\n                <input matInput type=\"password\" formControlName=\"authPassword\" \n                       placeholder=\"Mot de passe (min. 8 caractères)\">\n                <mat-icon matSuffix>lock</mat-icon>\n                <mat-error>{{ getErrorMessage('authPassword') }}</mat-error>\n              </mat-form-field>\n            </div>\n\n            <div class=\"form-row\">\n              <mat-form-field appearance=\"outline\" class=\"half-width\">\n                <mat-label>Protocole de chiffrement</mat-label>\n                <mat-select formControlName=\"privProtocol\" (selectionChange)=\"onPrivProtocolChange()\">\n                  <mat-option value=\"\">Aucun</mat-option>\n                  <mat-option *ngFor=\"let protocol of privProtocols\" [value]=\"protocol\">\n                    {{ protocol }}\n                  </mat-option>\n                </mat-select>\n                <mat-error>{{ getErrorMessage('privProtocol') }}</mat-error>\n              </mat-form-field>\n\n              <mat-form-field appearance=\"outline\" class=\"half-width\" \n                              *ngIf=\"assetForm.get('privProtocol')?.value\">\n                <mat-label>Mot de passe de chiffrement</mat-label>\n                <input matInput type=\"password\" formControlName=\"privPassword\" \n                       placeholder=\"Mot de passe (min. 8 caractères)\">\n                <mat-icon matSuffix>enhanced_encryption</mat-icon>\n                <mat-error>{{ getErrorMessage('privPassword') }}</mat-error>\n              </mat-form-field>\n            </div>\n          </div>\n        </mat-card-content>\n      </mat-card>\n\n      <!-- Erreurs de validation globales -->\n      <mat-error *ngIf=\"assetForm.errors?.['hostnameOrIpRequired'] && assetForm.touched\" \n                 class=\"global-error\">\n        Au moins un hostname ou une adresse IP doit être spécifié\n      </mat-error>\n\n    </mat-dialog-content>\n\n    <mat-dialog-actions align=\"end\" class=\"dialog-actions\">\n      <!-- Bouton Test de Connexion -->\n      <button mat-stroked-button type=\"button\" \n              [disabled]=\"assetForm.invalid || isTestingConnection || isLoading\"\n              (click)=\"testConnection()\"\n              class=\"test-button\">\n        <mat-icon *ngIf=\"!isTestingConnection\">wifi_tethering</mat-icon>\n        <mat-spinner *ngIf=\"isTestingConnection\" diameter=\"20\"></mat-spinner>\n        {{ isTestingConnection ? 'Test en cours...' : 'Tester la connexion' }}\n      </button>\n\n      <div class=\"spacer\"></div>\n\n      <!-- Boutons d'action -->\n      <button mat-button type=\"button\" (click)=\"onCancel()\" [disabled]=\"isLoading\">\n        Annuler\n      </button>\n      \n      <button mat-raised-button color=\"primary\" type=\"submit\" \n              [disabled]=\"assetForm.invalid || isLoading\">\n        <mat-icon *ngIf=\"!isLoading\">{{ isEditMode ? 'save' : 'add' }}</mat-icon>\n        <mat-spinner *ngIf=\"isLoading\" diameter=\"20\"></mat-spinner>\n        {{ isLoading ? 'Sauvegarde...' : (isEditMode ? 'Mettre à jour' : 'Créer') }}\n      </button>\n    </mat-dialog-actions>\n  </form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { SnmpScanConfig } from '../../models/scan-config.model';\nimport { SnmpService } from '../../services/snmp.service';\n\n@Component({\n  selector: 'app-config-list',\n  templateUrl: './config-list.component.html',\n  styleUrls: ['./config-list.component.css']\n})\nexport class ConfigListComponent implements OnInit {\n  configs: SnmpScanConfig[] = [];\n  loading = false;\n\n  constructor(private snmpService: SnmpService) {}\n\n  ngOnInit(): void {\n    this.loadConfigs();\n  }\n\n  loadConfigs(): void {\n    this.loading = true;\n    this.snmpService.getAllConfigs().subscribe({\n      next: (configs) => {\n        this.configs = configs;\n        this.loading = false;\n      },\n      error: (error) => {\n        console.error('Erreur lors du chargement des configurations:', error);\n        this.loading = false;\n      }\n    });\n  }\n}\n","<div class=\"config-list-container\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>\n        <mat-icon>settings</mat-icon>\n        Configurations SNMP\n      </mat-card-title>\n      <div class=\"header-actions\">\n        <button mat-raised-button color=\"primary\" routerLink=\"/snmp/configs/new\">\n          <mat-icon>add</mat-icon>\n          Nouvelle Configuration\n        </button>\n      </div>\n    </mat-card-header>\n\n    <mat-card-content>\n      <div *ngIf=\"loading\" class=\"loading-container\">\n        <mat-spinner></mat-spinner>\n        <p>Chargement des configurations...</p>\n      </div>\n\n      <div *ngIf=\"!loading && configs.length === 0\" class=\"empty-state\">\n        <mat-icon>settings_off</mat-icon>\n        <h3>Aucune configuration trouvée</h3>\n        <p>Commencez par créer votre première configuration de scan SNMP</p>\n        <button mat-raised-button color=\"primary\" routerLink=\"/snmp/configs/new\">\n          <mat-icon>add</mat-icon>\n          Créer une configuration\n        </button>\n      </div>\n\n      <div *ngIf=\"!loading && configs.length > 0\" class=\"configs-grid\">\n        <mat-card *ngFor=\"let config of configs\" class=\"config-card\">\n          <mat-card-header>\n            <mat-card-title>{{ config.name }}</mat-card-title>\n            <mat-card-subtitle>Asset: {{ config.asset?.hostname || config.asset?.ipAddress }}</mat-card-subtitle>\n          </mat-card-header>\n          <mat-card-content>\n            <p><strong>OIDs:</strong> {{ config.oids?.length || 0 }} configurés</p>\n            <p><strong>Statut:</strong> \n              <mat-chip [color]=\"config.active ? 'primary' : 'warn'\" selected>\n                {{ config.active ? 'Actif' : 'Inactif' }}\n              </mat-chip>\n            </p>\n          </mat-card-content>\n          <mat-card-actions>\n            <button mat-button color=\"primary\">\n              <mat-icon>edit</mat-icon>\n              Modifier\n            </button>\n            <button mat-button color=\"accent\">\n              <mat-icon>play_arrow</mat-icon>\n              Lancer\n            </button>\n          </mat-card-actions>\n        </mat-card>\n      </div>\n    </mat-card-content>\n  </mat-card>\n</div>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-config-form',\n  templateUrl: './config-form.component.html',\n  styleUrls: ['./config-form.component.css']\n})\nexport class ConfigFormComponent {\n\n}\n","<div class=\"config-form-container\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>\n        <mat-icon>settings</mat-icon>\n        Formulaire Configuration SNMP\n      </mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <p>Formulaire de création/modification de configuration SNMP (à implémenter)</p>\n      <button mat-raised-button routerLink=\"/snmp/configs\">\n        <mat-icon>arrow_back</mat-icon>\n        Retour aux configurations\n      </button>\n    </mat-card-content>\n  </mat-card>\n</div>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-manual-scan',\n  templateUrl: './manual-scan.component.html',\n  styleUrls: ['./manual-scan.component.css']\n})\nexport class ManualScanComponent {\n\n}\n","<div class=\"manual-scan-container\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>\n        <mat-icon>play_circle</mat-icon>\n        Scan Manuel SNMP\n      </mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <p>Interface de lancement de scan manuel SNMP (à implémenter)</p>\n      <button mat-raised-button color=\"primary\">\n        <mat-icon>play_arrow</mat-icon>\n        Lancer un scan\n      </button>\n    </mat-card-content>\n  </mat-card>\n</div>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-scan-history',\n  templateUrl: './scan-history.component.html',\n  styleUrls: ['./scan-history.component.css']\n})\nexport class ScanHistoryComponent {\n\n}\n","<div class=\"scan-history-container\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>\n        <mat-icon>history</mat-icon>\n        Historique des Scans SNMP\n      </mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <p>Historique et résultats des scans SNMP (à implémenter)</p>\n      <mat-chip-listbox>\n        <mat-chip-option color=\"primary\" selected>Tous</mat-chip-option>\n        <mat-chip-option>Succès</mat-chip-option>\n        <mat-chip-option>Échecs</mat-chip-option>\n        <mat-chip-option>En cours</mat-chip-option>\n      </mat-chip-listbox>\n    </mat-card-content>\n  </mat-card>\n</div>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-scan-detail',\n  templateUrl: './scan-detail.component.html',\n  styleUrls: ['./scan-detail.component.css']\n})\nexport class ScanDetailComponent {\n\n}\n","<div class=\"scan-detail-container\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>\n        <mat-icon>info</mat-icon>\n        Détails du Scan SNMP\n      </mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <p>Détails et résultats d'un scan SNMP spécifique (à implémenter)</p>\n      <button mat-raised-button routerLink=\"/snmp/results\">\n        <mat-icon>arrow_back</mat-icon>\n        Retour à l'historique\n      </button>\n    </mat-card-content>\n  </mat-card>\n</div>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AssetListComponent } from './components/asset-list/asset-list.component';\nimport { AssetFormComponent } from './components/asset-form/asset-form.component';\nimport { ConfigListComponent } from './components/config-list/config-list.component';\nimport { ConfigFormComponent } from './components/config-form/config-form.component';\nimport { ManualScanComponent } from './components/manual-scan/manual-scan.component';\nimport { ScanHistoryComponent } from './components/scan-history/scan-history.component';\nimport { ScanDetailComponent } from './components/scan-detail/scan-detail.component';\n\nconst routes: Routes = [\n  { path: '', component: AssetListComponent },\n  { path: 'assets/new', component: AssetFormComponent },\n  { path: 'assets/edit/:id', component: AssetFormComponent },\n  { path: 'configs', component: ConfigListComponent },\n  { path: 'configs/new', component: ConfigFormComponent },\n  { path: 'configs/edit/:id', component: ConfigFormComponent },\n  { path: 'run', component: ManualScanComponent },\n  { path: 'results', component: ScanHistoryComponent },\n  { path: 'results/:id', component: ScanDetailComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SnmpRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\n\nimport { SnmpRoutingModule } from './snmp-routing.module';\nimport { AssetListComponent } from './components/asset-list/asset-list.component';\nimport { AssetFormComponent } from './components/asset-form/asset-form.component';\nimport { ConfigListComponent } from './components/config-list/config-list.component';\nimport { ConfigFormComponent } from './components/config-form/config-form.component';\nimport { ManualScanComponent } from './components/manual-scan/manual-scan.component';\nimport { ScanHistoryComponent } from './components/scan-history/scan-history.component';\nimport { ScanDetailComponent } from './components/scan-detail/scan-detail.component';\n\n@NgModule({\n  declarations: [\n    AssetListComponent,\n    AssetFormComponent,\n    ConfigListComponent,\n    ConfigFormComponent,\n    ManualScanComponent,\n    ScanHistoryComponent,\n    ScanDetailComponent\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    SnmpRoutingModule,\n    // Angular Material modules\n    MatTableModule,\n    MatButtonModule,\n    MatIconModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatBadgeModule,\n    MatProgressSpinnerModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatDialogModule,\n    MatSnackBarModule,\n    MatTooltipModule,\n    MatDatepickerModule,\n    MatNativeDateModule\n  ]\n})\nexport class SnmpModule { }\n"],"mappings":"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","names":["AssetType","SnmpVersion"],"x_google_ignoreList":[0]}