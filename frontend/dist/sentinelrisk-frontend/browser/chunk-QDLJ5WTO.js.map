{
  "version": 3,
  "sources": ["src/app/features/admin/users/user-form-dialog/user-form-dialog.component.ts", "src/app/features/admin/users/user-form-dialog/user-form-dialog.component.html", "src/app/features/admin/users/users.component.ts", "src/app/features/admin/users/users.component.html", "src/app/features/admin/users/users.module.ts"],
  "sourcesContent": ["import { Component, Inject, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { User } from '../../../../core/models/user.model';\n\nexport interface UserFormDialogData {\n  user?: User;\n  isEdit: boolean;\n}\n\n@Component({\n  selector: 'app-user-form-dialog',\n  templateUrl: './user-form-dialog.component.html',\n  styleUrls: ['./user-form-dialog.component.scss']\n})\nexport class UserFormDialogComponent implements OnInit {\n  userForm: FormGroup;\n  isEdit = false;\n  dialogTitle: string;\n  roles = ['admin', 'user', 'risk_manager', 'compliance_officer', 'auditor'];\n  \n  constructor(\n    private fb: FormBuilder,\n    private dialogRef: MatDialogRef<UserFormDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: UserFormDialogData\n  ) {\n    this.isEdit = data.isEdit;\n    this.dialogTitle = this.isEdit ? 'Modifier l\\'utilisateur' : 'Ajouter un utilisateur';\n    \n    this.userForm = this.fb.group({\n      username: ['', [Validators.required, Validators.minLength(3)]],\n      email: ['', [Validators.required, Validators.email]],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      department: [''],\n      role: ['user', Validators.required],\n      active: [true]\n    });\n    \n    if (this.isEdit && data.user) {\n      this.userForm.patchValue({\n        username: data.user.username,\n        email: data.user.email,\n        firstName: data.user.firstName,\n        lastName: data.user.lastName,\n        department: data.user.department || '',\n        role: data.user.role,\n        active: data.user.active\n      });\n      \n      // Le nom d'utilisateur ne doit pas être modifiable\n      this.userForm.get('username')?.disable();\n    }\n  }\n\n  ngOnInit(): void {}\n\n  onSubmit(): void {\n    if (this.userForm.valid) {\n      const userData: Partial<User> = {\n        ...this.userForm.getRawValue(),\n      };\n      \n      this.dialogRef.close(userData);\n    }\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n\n  getErrorMessage(controlName: string): string {\n    const control = this.userForm.get(controlName);\n    \n    if (!control) return '';\n    \n    if (control.hasError('required')) {\n      return 'Ce champ est requis';\n    }\n    \n    if (control.hasError('email')) {\n      return 'Email invalide';\n    }\n    \n    if (control.hasError('minlength')) {\n      return `Minimum ${control.getError('minlength').requiredLength} caractères`;\n    }\n    \n    return '';\n  }\n} ", "<h2 mat-dialog-title>{{ dialogTitle }}</h2>\n\n<form [formGroup]=\"userForm\" (ngSubmit)=\"onSubmit()\">\n  <mat-dialog-content>\n    <div class=\"form-row\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Nom d'utilisateur</mat-label>\n        <input matInput formControlName=\"username\" placeholder=\"john.doe\">\n        <mat-error *ngIf=\"userForm.get('username')?.invalid\">{{ getErrorMessage('username') }}</mat-error>\n      </mat-form-field>\n      \n      <mat-form-field appearance=\"outline\">\n        <mat-label>Email</mat-label>\n        <input matInput formControlName=\"email\" placeholder=\"john.doe@example.com\" type=\"email\">\n        <mat-error *ngIf=\"userForm.get('email')?.invalid\">{{ getErrorMessage('email') }}</mat-error>\n      </mat-form-field>\n    </div>\n    \n    <div class=\"form-row\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Prénom</mat-label>\n        <input matInput formControlName=\"firstName\" placeholder=\"John\">\n        <mat-error *ngIf=\"userForm.get('firstName')?.invalid\">{{ getErrorMessage('firstName') }}</mat-error>\n      </mat-form-field>\n      \n      <mat-form-field appearance=\"outline\">\n        <mat-label>Nom</mat-label>\n        <input matInput formControlName=\"lastName\" placeholder=\"Doe\">\n        <mat-error *ngIf=\"userForm.get('lastName')?.invalid\">{{ getErrorMessage('lastName') }}</mat-error>\n      </mat-form-field>\n    </div>\n    \n    <div class=\"form-row\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Département</mat-label>\n        <input matInput formControlName=\"department\" placeholder=\"IT\">\n      </mat-form-field>\n      \n      <mat-form-field appearance=\"outline\">\n        <mat-label>Rôle</mat-label>\n        <mat-select formControlName=\"role\">\n          <mat-option *ngFor=\"let role of roles\" [value]=\"role\">\n            {{ role }}\n          </mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"userForm.get('role')?.invalid\">{{ getErrorMessage('role') }}</mat-error>\n      </mat-form-field>\n    </div>\n    \n    <div class=\"form-row active-row\">\n      <mat-slide-toggle formControlName=\"active\">\n        Utilisateur actif\n      </mat-slide-toggle>\n    </div>\n  </mat-dialog-content>\n  \n  <mat-dialog-actions align=\"end\">\n    <button mat-button type=\"button\" (click)=\"onCancel()\">Annuler</button>\n    <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"userForm.invalid\">\n      {{ isEdit ? 'Mettre à jour' : 'Créer' }}\n    </button>\n  </mat-dialog-actions>\n</form> ", "import { Component, OnInit } from '@angular/core';\nimport { User } from '../../../core/models/user.model';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { UserService } from './services/user.service';\nimport { UserFormDialogComponent, UserFormDialogData } from './user-form-dialog/user-form-dialog.component';\nimport { ConfirmDialogComponent, ConfirmDialogData } from '../shared/confirm-dialog/confirm-dialog.component';\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.scss']\n})\nexport class UsersComponent implements OnInit {\n  users: User[] = [];\n  displayedColumns: string[] = ['username', 'email', 'fullName', 'department', 'role', 'active', 'createdAt', 'actions'];\n  isLoading = false;\n\n  constructor(\n    private userService: UserService,\n    private dialog: MatDialog,\n    private snackBar: MatSnackBar\n  ) {}\n\n  ngOnInit(): void {\n    this.loadUsers();\n  }\n\n  loadUsers(): void {\n    this.isLoading = true;\n    this.userService.getUsers().subscribe({\n      next: (users) => {\n        console.log('Utilisateurs récupérés:', users);\n        this.users = users;\n        this.isLoading = false;\n      },\n      error: (error) => {\n        console.error('Erreur lors du chargement des utilisateurs:', error);\n        this.showError('Erreur lors du chargement des utilisateurs');\n        this.isLoading = false;\n      }\n    });\n  }\n\n  openUserForm(user?: User): void {\n    const dialogData: UserFormDialogData = {\n      user: user,\n      isEdit: !!user\n    };\n\n    const dialogRef = this.dialog.open(UserFormDialogComponent, {\n      width: '500px',\n      data: dialogData\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        if (dialogData.isEdit) {\n          this.updateUser(user!.id, result);\n        } else {\n          this.createUser(result);\n        }\n      }\n    });\n  }\n\n  deleteUser(user: User): void {\n    const dialogData: ConfirmDialogData = {\n      title: 'Confirmation de suppression',\n      message: `Êtes-vous sûr de vouloir supprimer l'utilisateur ${user.username} ?`,\n      confirmText: 'Supprimer',\n      cancelText: 'Annuler',\n      color: 'warn'\n    };\n\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n      width: '400px',\n      data: dialogData\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.performDeleteUser(user.id);\n      }\n    });\n  }\n\n  private performDeleteUser(id: string): void {\n    this.isLoading = true;\n    this.userService.deleteUser(id).subscribe({\n      next: () => {\n        this.loadUsers();\n        this.showSuccess('Utilisateur supprimé avec succès');\n      },\n      error: (error) => {\n        console.error('Erreur lors de la suppression de l\\'utilisateur:', error);\n        this.showError('Erreur lors de la suppression de l\\'utilisateur');\n        this.isLoading = false;\n      }\n    });\n  }\n\n  private createUser(userData: Partial<User>): void {\n    this.isLoading = true;\n    this.userService.createUser(userData).subscribe({\n      next: () => {\n        this.loadUsers();\n        this.showSuccess('Utilisateur créé avec succès');\n      },\n      error: (error) => {\n        console.error('Erreur lors de la création de l\\'utilisateur:', error);\n        this.showError('Erreur lors de la création de l\\'utilisateur');\n        this.isLoading = false;\n      }\n    });\n  }\n\n  private updateUser(id: string, userData: Partial<User>): void {\n    this.isLoading = true;\n    this.userService.updateUser(id, userData).subscribe({\n      next: () => {\n        this.loadUsers();\n        this.showSuccess('Utilisateur mis à jour avec succès');\n      },\n      error: (error) => {\n        console.error('Erreur lors de la mise à jour de l\\'utilisateur:', error);\n        this.showError('Erreur lors de la mise à jour de l\\'utilisateur');\n        this.isLoading = false;\n      }\n    });\n  }\n\n  private showSuccess(message: string): void {\n    this.snackBar.open(message, 'Fermer', { duration: 3000 });\n  }\n\n  private showError(message: string): void {\n    this.snackBar.open(message, 'Fermer', { duration: 3000, panelClass: ['error-snackbar'] });\n  }\n} ", "<div class=\"users-container\">\n  <div class=\"header\">\n    <h1>Gestion des utilisateurs</h1>\n    <button mat-raised-button color=\"primary\" (click)=\"openUserForm()\">\n      <mat-icon>add</mat-icon>\n      Nouvel utilisateur\n    </button>\n  </div>\n\n  <div class=\"table-container\">\n    <div class=\"loading-shade\" *ngIf=\"isLoading\">\n      <mat-progress-spinner mode=\"indeterminate\" diameter=\"50\"></mat-progress-spinner>\n    </div>\n\n    <table mat-table [dataSource]=\"users\" class=\"mat-elevation-z8\">\n      <!-- Colonne Nom d'utilisateur -->\n      <ng-container matColumnDef=\"username\">\n        <th mat-header-cell *matHeaderCellDef>Nom d'utilisateur</th>\n        <td mat-cell *matCellDef=\"let user\">{{ user.username }}</td>\n      </ng-container>\n\n      <!-- Colonne Email -->\n      <ng-container matColumnDef=\"email\">\n        <th mat-header-cell *matHeaderCellDef>Email</th>\n        <td mat-cell *matCellDef=\"let user\">{{ user.email }}</td>\n      </ng-container>\n\n      <!-- Colonne Nom complet -->\n      <ng-container matColumnDef=\"fullName\">\n        <th mat-header-cell *matHeaderCellDef>Nom complet</th>\n        <td mat-cell *matCellDef=\"let user\">{{ user.firstName }} {{ user.lastName }}</td>\n      </ng-container>\n\n      <!-- Colonne Département -->\n      <ng-container matColumnDef=\"department\">\n        <th mat-header-cell *matHeaderCellDef>Département</th>\n        <td mat-cell *matCellDef=\"let user\">{{ user.department }}</td>\n      </ng-container>\n\n      <!-- Colonne Rôle -->\n      <ng-container matColumnDef=\"role\">\n        <th mat-header-cell *matHeaderCellDef>Rôle</th>\n        <td mat-cell *matCellDef=\"let user\">\n          <span class=\"role-badge\" [class]=\"user.role.toLowerCase()\">\n            {{ user.role }}\n          </span>\n        </td>\n      </ng-container>\n\n      <!-- Colonne Statut -->\n      <ng-container matColumnDef=\"active\">\n        <th mat-header-cell *matHeaderCellDef>Statut</th>\n        <td mat-cell *matCellDef=\"let user\">\n          <span class=\"status-badge\" [class]=\"user.active ? 'active' : 'inactive'\">\n            {{ user.active ? 'Actif' : 'Inactif' }}\n          </span>\n        </td>\n      </ng-container>\n\n      <!-- Colonne Date de création -->\n      <ng-container matColumnDef=\"createdAt\">\n        <th mat-header-cell *matHeaderCellDef>Date de création</th>\n        <td mat-cell *matCellDef=\"let user\">{{ user.createdAt | date:'dd/MM/yyyy' }}</td>\n      </ng-container>\n\n      <!-- Colonne Actions -->\n      <ng-container matColumnDef=\"actions\">\n        <th mat-header-cell *matHeaderCellDef>Actions</th>\n        <td mat-cell *matCellDef=\"let user\">\n          <button mat-icon-button color=\"primary\" (click)=\"openUserForm(user)\" matTooltip=\"Modifier\">\n            <mat-icon>edit</mat-icon>\n          </button>\n          <button mat-icon-button color=\"warn\" (click)=\"deleteUser(user)\" matTooltip=\"Supprimer\">\n            <mat-icon>delete</mat-icon>\n          </button>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    </table>\n\n    <!-- Message si aucune donnée -->\n    <div class=\"no-data\" *ngIf=\"!isLoading && users.length === 0\">\n      <p>Aucun utilisateur trouvé</p>\n      <button mat-raised-button color=\"primary\" (click)=\"openUserForm()\">\n        Ajouter un utilisateur\n      </button>\n    </div>\n  </div>\n</div> ", "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n// Material imports\nimport { MatTableModule } from '@angular/material/table';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\n// Components\nimport { UsersComponent } from './users.component';\nimport { UserFormDialogComponent } from './user-form-dialog/user-form-dialog.component';\n\n// Shared modules\nimport { AdminSharedModule } from '../shared/admin-shared.module';\n\nconst routes: Routes = [\n  { path: '', component: UsersComponent }\n];\n\n@NgModule({\n  declarations: [\n    UsersComponent,\n    UserFormDialogComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    ReactiveFormsModule,\n    AdminSharedModule,\n    \n    // Material modules\n    MatTableModule,\n    MatButtonModule,\n    MatIconModule,\n    MatSnackBarModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatSlideToggleModule,\n    MatProgressSpinnerModule,\n    MatTooltipModule\n  ]\n})\nexport class UsersModule { } "],
  "mappings": "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",
  "names": []
}
