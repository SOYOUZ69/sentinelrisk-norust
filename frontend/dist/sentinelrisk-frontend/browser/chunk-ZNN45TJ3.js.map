{
  "version": 3,
  "sources": ["src/app/features/admin/users/services/user.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ApiService } from '../../../../core/services/api.service';\nimport { User } from '../../../../core/models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private readonly basePath = '/users';\n\n  constructor(private apiService: ApiService) {}\n\n  /**\n   * Récupère la liste de tous les utilisateurs\n   * @returns Observable contenant un tableau d'utilisateurs\n   */\n  getUsers(): Observable<User[]> {\n    return this.apiService.get<User[]>(this.basePath);\n  }\n\n  /**\n   * Récupère un utilisateur par son identifiant\n   * @param id Identifiant de l'utilisateur\n   * @returns Observable contenant l'utilisateur\n   */\n  getUser(id: string): Observable<User> {\n    return this.apiService.get<User>(`${this.basePath}/${id}`);\n  }\n\n  /**\n   * Crée un nouvel utilisateur\n   * @param user Données de l'utilisateur à créer\n   * @returns Observable contenant l'utilisateur créé\n   */\n  createUser(user: Partial<User>): Observable<User> {\n    return this.apiService.post<User>(this.basePath, user);\n  }\n\n  /**\n   * Met à jour un utilisateur existant\n   * @param id Identifiant de l'utilisateur\n   * @param user Nouvelles données de l'utilisateur\n   * @returns Observable contenant l'utilisateur mis à jour\n   */\n  updateUser(id: string, user: Partial<User>): Observable<User> {\n    return this.apiService.put<User>(`${this.basePath}/${id}`, user);\n  }\n\n  /**\n   * Supprime un utilisateur\n   * @param id Identifiant de l'utilisateur à supprimer\n   * @returns Observable\n   */\n  deleteUser(id: string): Observable<void> {\n    return this.apiService.delete<void>(`${this.basePath}/${id}`);\n  }\n\n  /**\n   * Recherche des utilisateurs par leur rôle\n   * @param role Rôle à rechercher\n   * @returns Observable contenant un tableau d'utilisateurs\n   */\n  getUsersByRole(role: string): Observable<User[]> {\n    return this.apiService.get<User[]>(`${this.basePath}/role/${role}`);\n  }\n\n  /**\n   * Récupère tous les utilisateurs actifs\n   * @returns Observable contenant un tableau d'utilisateurs\n   */\n  getActiveUsers(): Observable<User[]> {\n    return this.apiService.get<User[]>(`${this.basePath}/active`);\n  }\n} "],
  "mappings": ";;;;;;;;;AAQM,IAAO,cAAP,MAAO,aAAW;EAGtB,YAAoB,YAAsB;AAAtB,SAAA,aAAA;AAFH,SAAA,WAAW;EAEiB;;;;;EAM7C,WAAQ;AACN,WAAO,KAAK,WAAW,IAAY,KAAK,QAAQ;EAClD;;;;;;EAOA,QAAQ,IAAU;AAChB,WAAO,KAAK,WAAW,IAAU,GAAG,KAAK,QAAQ,IAAI,EAAE,EAAE;EAC3D;;;;;;EAOA,WAAW,MAAmB;AAC5B,WAAO,KAAK,WAAW,KAAW,KAAK,UAAU,IAAI;EACvD;;;;;;;EAQA,WAAW,IAAY,MAAmB;AACxC,WAAO,KAAK,WAAW,IAAU,GAAG,KAAK,QAAQ,IAAI,EAAE,IAAI,IAAI;EACjE;;;;;;EAOA,WAAW,IAAU;AACnB,WAAO,KAAK,WAAW,OAAa,GAAG,KAAK,QAAQ,IAAI,EAAE,EAAE;EAC9D;;;;;;EAOA,eAAe,MAAY;AACzB,WAAO,KAAK,WAAW,IAAY,GAAG,KAAK,QAAQ,SAAS,IAAI,EAAE;EACpE;;;;;EAMA,iBAAc;AACZ,WAAO,KAAK,WAAW,IAAY,GAAG,KAAK,QAAQ,SAAS;EAC9D;;;uBAjEW,cAAW,mBAAA,UAAA,CAAA;IAAA;EAAA;;4EAAX,cAAW,SAAX,aAAW,WAAA,YAFV,OAAM,CAAA;EAAA;;",
  "names": []
}
