{
  "version": 3,
  "sources": ["src/app/features/risks/services/risk.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiService } from '../../../core/services/api.service';\nimport { Risk, Category, Control } from '../../../core/models/risk.model';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../../../environments/environment';\nimport { ImportResult } from '../../../core/models/import-result.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RiskService {\n  private readonly basePath = '/risks';\n\n  constructor(\n    private apiService: ApiService,\n    private http: HttpClient\n  ) {}\n\n  /**\n   * Récupère la liste de tous les risques\n   * @returns Observable contenant un tableau de risques\n   */\n  getRisks(): Observable<Risk[]> {\n    return this.apiService.get<any[]>(this.basePath)\n      .pipe(\n        map(risksData => risksData.map(risk => this.mapRiskResponse(risk))),\n        catchError(error => {\n          console.error('Erreur lors de la récupération des risques', error);\n          return throwError(() => new Error('Impossible de récupérer la liste des risques. Veuillez réessayer.'));\n        })\n      );\n  }\n\n  /**\n   * Récupère un risque par son identifiant\n   * @param id Identifiant du risque\n   * @returns Observable contenant le risque\n   */\n  getRisk(id: string): Observable<Risk> {\n    return this.apiService.get<any>(`${this.basePath}/${id}`)\n      .pipe(\n        map(riskData => this.mapRiskResponse(riskData)),\n        catchError(error => {\n          console.error(`Erreur lors de la récupération du risque ${id}`, error);\n          return throwError(() => new Error('Impossible de récupérer les détails du risque. Veuillez réessayer.'));\n        })\n      );\n  }\n\n  /**\n   * Crée un nouveau risque\n   * @param risk Données du risque à créer\n   * @returns Observable contenant le risque créé\n   */\n  createRisk(risk: Partial<Risk>): Observable<Risk> {\n    // Adapter le format pour le backend\n    const riskRequest = this.formatRiskRequest(risk);\n    \n    return this.apiService.post<any>(this.basePath, riskRequest)\n      .pipe(\n        map(riskData => this.mapRiskResponse(riskData)),\n        catchError(error => {\n          console.error('Erreur lors de la création du risque', error);\n          const message = this.getErrorMessage(error) || 'Impossible de créer le risque. Veuillez réessayer.';\n          return throwError(() => new Error(message));\n        })\n      );\n  }\n\n  /**\n   * Met à jour un risque existant\n   * @param id Identifiant du risque\n   * @param risk Nouvelles données du risque\n   * @returns Observable contenant le risque mis à jour\n   */\n  updateRisk(id: string, risk: Partial<Risk>): Observable<Risk> {\n    // Adapter le format pour le backend\n    const riskRequest = this.formatRiskRequest(risk);\n    \n    return this.apiService.put<any>(`${this.basePath}/${id}`, riskRequest)\n      .pipe(\n        map(riskData => this.mapRiskResponse(riskData)),\n        catchError(error => {\n          console.error(`Erreur lors de la mise à jour du risque ${id}`, error);\n          const message = this.getErrorMessage(error) || 'Impossible de mettre à jour le risque. Veuillez réessayer.';\n          return throwError(() => new Error(message));\n        })\n      );\n  }\n\n  /**\n   * Met à jour uniquement les contrôles associés à un risque\n   * @param id Identifiant du risque\n   * @param controlIds IDs des contrôles à associer\n   * @returns Observable contenant le risque mis à jour\n   */\n  updateRiskControls(id: string, controlIds: number[]): Observable<Risk> {\n    // Convertir tous les IDs en nombre pour assurer la compatibilité avec le backend\n    const numericControlIds = controlIds.map(id => typeof id === 'string' ? +id : id);\n    \n    // Utiliser le service ApiService qui gère l'authentification et les headers correctement\n    return this.apiService.put<any>(`${this.basePath}/${id}/controls`, numericControlIds)\n      .pipe(\n        map(riskData => this.mapRiskResponse(riskData)),\n        catchError(error => {\n          console.error(`Erreur lors de la mise à jour des contrôles du risque ${id}`, error);\n          const message = this.getErrorMessage(error) || 'Impossible de mettre à jour les contrôles associés au risque. Veuillez réessayer.';\n          return throwError(() => new Error(message));\n        })\n      );\n  }\n\n  /**\n   * Supprime un risque\n   * @param id Identifiant du risque à supprimer\n   * @returns Observable\n   */\n  deleteRisk(id: string): Observable<void> {\n    return this.apiService.delete<void>(`${this.basePath}/${id}`)\n      .pipe(\n        catchError(error => {\n          console.error(`Erreur lors de la suppression du risque ${id}`, error);\n          return throwError(() => new Error('Impossible de supprimer le risque. Veuillez réessayer.'));\n        })\n      );\n  }\n\n  /**\n   * Récupère les risques par catégorie\n   * @param categoryId Identifiant de la catégorie\n   * @returns Observable contenant un tableau de risques\n   */\n  getRisksByCategory(categoryId: string): Observable<Risk[]> {\n    return this.apiService.get<Risk[]>(`${this.basePath}/category/${categoryId}`)\n      .pipe(\n        catchError(error => {\n          console.error(`Erreur lors de la récupération des risques de la catégorie ${categoryId}`, error);\n          return throwError(() => new Error('Impossible de récupérer les risques de cette catégorie. Veuillez réessayer.'));\n        })\n      );\n  }\n\n  /**\n   * Récupère les risques avec un score élevé\n   * @returns Observable contenant un tableau de risques\n   */\n  getHighScoreRisks(): Observable<Risk[]> {\n    return this.apiService.get<Risk[]>(`${this.basePath}/high-score`)\n      .pipe(\n        catchError(error => {\n          console.error('Erreur lors de la récupération des risques à score élevé', error);\n          return throwError(() => new Error('Impossible de récupérer les risques à score élevé. Veuillez réessayer.'));\n        })\n      );\n  }\n  \n  /**\n   * Formate les données du risque pour correspondre au format attendu par le backend\n   * @param risk Données du risque\n   * @returns Objet formaté pour le backend\n   */\n  private formatRiskRequest(risk: Partial<Risk>): any {\n    // Utiliser categoryId si disponible, sinon prendre de category.id\n    const categoryId = risk.categoryId || risk.category?.id;\n    \n    return {\n      name: risk.name,\n      description: risk.description,\n      categoryId: categoryId,  // Utilise directement categoryId pour le backend\n      impactLevel: risk.impactLevel,\n      probabilityLevel: risk.probabilityLevel,\n      status: risk.status,\n      mitigationPlan: risk.mitigationPlan\n    };\n  }\n  \n  /**\n   * Extrait un message d'erreur lisible de la réponse HTTP\n   * @param error Erreur HTTP\n   * @returns Message d'erreur lisible\n   */\n  private getErrorMessage(error: any): string {\n    if (error.error) {\n      if (typeof error.error === 'string') {\n        return error.error;\n      }\n      if (error.error.message) {\n        return error.error.message;\n      }\n      if (typeof error.error === 'object') {\n        // Si c'est un objet d'erreurs de validation (champ -> message)\n        const validationErrors = Object.entries(error.error)\n          .map(([field, message]) => `${field}: ${message}`)\n          .join(', ');\n        \n        if (validationErrors) {\n          return `Erreurs de validation: ${validationErrors}`;\n        }\n      }\n    }\n    return error.statusText || 'Une erreur est survenue';\n  }\n\n  /**\n   * Mappe la réponse du backend vers le modèle frontend\n   * @param riskData Données du risque provenant du backend\n   * @returns Objet Risk pour le frontend\n   */\n  private mapRiskResponse(riskData: any): Risk {\n    console.log('Mapping risk response:', riskData);\n    \n    // Création d'un objet category à partir de categoryId et categoryName\n    // pour la rétrocompatibilité\n    const categoryObject = riskData.categoryId ? {\n      id: riskData.categoryId.toString(),\n      name: riskData.categoryName || 'Sans catégorie'\n    } : undefined;\n    \n    // Utiliser directement les objets controls complets fournis par le backend s'ils existent\n    let controls: Control[] = [];\n    \n    // Priorité aux contrôles complets fournis par le backend\n    if (riskData.controls && Array.isArray(riskData.controls)) {\n      controls = riskData.controls.map((ctrl: any) => ({\n        id: ctrl.id?.toString(),\n        name: ctrl.name || `Contrôle ${ctrl.id}`,\n        description: ctrl.description,\n        type: ctrl.type || 'UNKNOWN',\n        status: ctrl.status || 'UNKNOWN',\n        frequency: ctrl.frequency\n      }));\n      console.log('Mapped controls from complete objects:', controls);\n    } \n    // Utiliser les controlIds uniquement si les contrôles complets ne sont pas disponibles\n    else if (riskData.controlIds && Array.isArray(riskData.controlIds)) {\n      controls = riskData.controlIds.map((id: number | string) => ({\n        id: id.toString(),\n        name: `Contrôle ${id}`,\n        type: 'UNKNOWN',\n        status: 'UNKNOWN'\n      }));\n      console.log('Mapped controls from IDs:', controls);\n    }\n    \n    // Mapper le score du backend vers le frontend\n    return {\n      // Propriétés de base\n      ...riskData,\n      // Conversion de l'ID numérique en string si nécessaire\n      id: riskData.id?.toString(),\n      \n      // Pour la rétrocompatibilité avec l'interface actuelle\n      category: categoryObject,\n      \n      // Ajouter les contrôles mappés\n      controls: controls,\n      \n      // Utiliser riskScore du backend comme score dans le frontend\n      score: riskData.riskScore || 0,\n      \n      // S'assurer que les dates sont correctement converties\n      createdAt: riskData.createdAt ? new Date(riskData.createdAt) : new Date(),\n      updatedAt: riskData.updatedAt ? new Date(riskData.updatedAt) : new Date()\n    } as Risk;\n  }\n\n  /**\n   * Crée plusieurs risques en une seule opération\n   * @param risks Tableau d'objets risques à créer\n   * @returns Observable contenant les risques créés\n   */\n  bulkCreate(risks: any[]): Observable<any[]> {\n    // Transformer les données pour correspondre au format attendu par le backend\n    const riskRequests = risks.map(risk => {\n      // Préparer la requête avec le format attendu par le backend\n      return {\n        name: risk.name,\n        description: risk.description,\n        categoryName: risk.categoryName, // Utilisé pour rechercher la catégorie par nom\n        impactLevel: risk.impactLevel,\n        probabilityLevel: risk.probabilityLevel,\n        mitigationPlan: risk.mitigationPlan\n      };\n    });\n    \n    // Appel au backend pour création massive\n    return this.apiService.post<any[]>(`${this.basePath}/bulk`, riskRequests)\n      .pipe(\n        map(responseData => responseData.map(risk => this.mapRiskResponse(risk))),\n        catchError(error => {\n          console.error('Erreur lors de la création massive de risques', error);\n          const message = this.getErrorMessage(error) || 'Impossible de créer les risques. Veuillez réessayer.';\n          return throwError(() => new Error(message));\n        })\n      );\n  }\n  \n  /**\n   * Importe des risques à partir d'un fichier CSV\n   * @param file Fichier CSV à importer\n   * @returns Observable contenant le résultat de l'import\n   */\n  importRisksFromFile(file: File): Observable<ImportResult> {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    // Utiliser la méthode spécialisée pour les FormData\n    return this.apiService.postFormData<ImportResult>(`${this.basePath}/bulk`, formData)\n      .pipe(\n        catchError(error => {\n          console.error('Erreur lors de l\\'import du fichier CSV', error);\n          const message = this.getErrorMessage(error) || 'Impossible d\\'importer le fichier CSV. Veuillez réessayer.';\n          return throwError(() => new Error(message));\n        })\n      );\n  }\n} "],
  "mappings": "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",
  "names": ["id"]
}
