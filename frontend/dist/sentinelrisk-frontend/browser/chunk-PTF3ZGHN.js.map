{
  "version": 3,
  "sources": ["src/app/core/guards/auth.guard.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot, Router, UrlTree } from '@angular/router';\nimport { KeycloakAuthGuard, KeycloakService } from 'keycloak-angular';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard extends KeycloakAuthGuard {\n  constructor(\n    protected override readonly router: Router,\n    protected readonly keycloak: KeycloakService\n  ) {\n    super(router, keycloak);\n  }\n\n  async isAccessAllowed(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Promise<boolean | UrlTree> {\n    // Force the user to log in if they are not\n    if (!this.authenticated) {\n      await this.keycloak.login({\n        redirectUri: window.location.origin + state.url\n      });\n      return false;\n    }\n\n    // Get the roles required from the route\n    const requiredRoles = route.data['roles'];\n\n    // Allow the user to proceed if no roles are required or if the user has all the required roles\n    if (!requiredRoles || requiredRoles.length === 0) {\n      return true;\n    }\n\n    return requiredRoles.some((role: string) => this.roles.includes(role));\n  }\n} "],
  "mappings": ";;;;;;;;;;;;AAOM,IAAO,YAAP,MAAO,mBAAkB,kBAAiB;EAC9C,YAC8B,QACT,UAAyB;AAE5C,UAAM,QAAQ,QAAQ;AAHM,SAAA,SAAA;AACT,SAAA,WAAA;EAGrB;EAEM,gBACJ,OACA,OAA0B;;AAG1B,UAAI,CAAC,KAAK,eAAe;AACvB,cAAM,KAAK,SAAS,MAAM;UACxB,aAAa,OAAO,SAAS,SAAS,MAAM;SAC7C;AACD,eAAO;MACT;AAGA,YAAM,gBAAgB,MAAM,KAAK,OAAO;AAGxC,UAAI,CAAC,iBAAiB,cAAc,WAAW,GAAG;AAChD,eAAO;MACT;AAEA,aAAO,cAAc,KAAK,CAAC,SAAiB,KAAK,MAAM,SAAS,IAAI,CAAC;IACvE;;;;uBA7BW,YAAS,mBAAA,MAAA,GAAA,mBAAA,eAAA,CAAA;IAAA;EAAA;;4EAAT,YAAS,SAAT,WAAS,WAAA,YAFR,OAAM,CAAA;EAAA;;",
  "names": []
}
