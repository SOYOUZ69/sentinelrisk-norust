{
  "version": 3,
  "sources": ["src/app/features/compliance/services/risk-compliance-mapping.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiService } from '../../../core/services/api.service';\nimport { RiskComplianceMapping, GapAnalysisResult } from '../../../core/models/compliance.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RiskComplianceMappingService {\n  private readonly basePath = '/risk-compliance-mappings';\n  private readonly gapAnalysisPath = '/risk-compliance-mappings/gap-analysis';\n\n  constructor(private apiService: ApiService) {}\n\n  /**\n   * Récupère la liste de tous les mappings risques-conformité\n   * @returns Observable contenant un tableau de mappings\n   */\n  getMappings(): Observable<RiskComplianceMapping[]> {\n    return this.apiService.get<RiskComplianceMapping[]>(this.basePath)\n      .pipe(\n        catchError(error => {\n          console.error('Erreur lors de la récupération des mappings', error);\n          return throwError(() => new Error('Impossible de récupérer la liste des mappings. Veuillez réessayer.'));\n        })\n      );\n  }\n\n  /**\n   * Récupère la liste des mappings risque-conformité filtrés par risque\n   * @param riskId Identifiant du risque\n   * @returns Observable contenant un tableau de mappings\n   */\n  getMappingsByRisk(riskId: string): Observable<RiskComplianceMapping[]> {\n    return this.apiService.get<RiskComplianceMapping[]>(`${this.basePath}?riskId=${riskId}`)\n      .pipe(\n        catchError(error => {\n          console.error(`Erreur lors de la récupération des mappings du risque ${riskId}`, error);\n          return throwError(() => new Error('Impossible de récupérer les mappings de ce risque. Veuillez réessayer.'));\n        })\n      );\n  }\n\n  /**\n   * Récupère la liste des mappings risque-conformité filtrés par framework\n   * @param frameworkId Identifiant du framework\n   * @returns Observable contenant un tableau de mappings\n   */\n  getMappingsByFramework(frameworkId: string): Observable<RiskComplianceMapping[]> {\n    return this.apiService.get<RiskComplianceMapping[]>(`${this.basePath}?frameworkId=${frameworkId}`)\n      .pipe(\n        catchError(error => {\n          console.error(`Erreur lors de la récupération des mappings du framework ${frameworkId}`, error);\n          return throwError(() => new Error('Impossible de récupérer les mappings de ce framework. Veuillez réessayer.'));\n        })\n      );\n  }\n\n  /**\n   * Récupère un mapping par son identifiant\n   * @param id Identifiant du mapping\n   * @returns Observable contenant le mapping\n   */\n  getMapping(id: string): Observable<RiskComplianceMapping> {\n    return this.apiService.get<RiskComplianceMapping>(`${this.basePath}/${id}`)\n      .pipe(\n        catchError(error => {\n          console.error(`Erreur lors de la récupération du mapping ${id}`, error);\n          return throwError(() => new Error('Impossible de récupérer les détails du mapping. Veuillez réessayer.'));\n        })\n      );\n  }\n\n  /**\n   * Crée un nouveau mapping\n   * @param mapping Données du mapping à créer\n   * @returns Observable contenant le mapping créé\n   */\n  createMapping(mapping: Partial<RiskComplianceMapping>): Observable<RiskComplianceMapping> {\n    return this.apiService.post<RiskComplianceMapping>(this.basePath, mapping)\n      .pipe(\n        catchError(error => {\n          console.error('Erreur lors de la création du mapping', error);\n          return throwError(() => new Error('Impossible de créer le mapping. Veuillez réessayer.'));\n        })\n      );\n  }\n\n  /**\n   * Met à jour un mapping existant\n   * @param id Identifiant du mapping\n   * @param mapping Nouvelles données du mapping\n   * @returns Observable contenant le mapping mis à jour\n   */\n  updateMapping(id: string, mapping: Partial<RiskComplianceMapping>): Observable<RiskComplianceMapping> {\n    return this.apiService.put<RiskComplianceMapping>(`${this.basePath}/${id}`, mapping)\n      .pipe(\n        catchError(error => {\n          console.error(`Erreur lors de la mise à jour du mapping ${id}`, error);\n          return throwError(() => new Error('Impossible de mettre à jour le mapping. Veuillez réessayer.'));\n        })\n      );\n  }\n\n  /**\n   * Supprime un mapping\n   * @param id Identifiant du mapping à supprimer\n   * @returns Observable\n   */\n  deleteMapping(id: string): Observable<void> {\n    return this.apiService.delete<void>(`${this.basePath}/${id}`)\n      .pipe(\n        catchError(error => {\n          console.error(`Erreur lors de la suppression du mapping ${id}`, error);\n          return throwError(() => new Error('Impossible de supprimer le mapping. Veuillez réessayer.'));\n        })\n      );\n  }\n\n  /**\n   * Récupère l'analyse d'écarts pour un framework donné\n   * Si riskId est fourni, l'analyse sera spécifique à ce risque\n   * @param frameworkId Identifiant du référentiel\n   * @param riskId Identifiant du risque (optionnel)\n   * @returns Observable contenant les résultats de l'analyse d'écarts\n   */\n  getGapAnalysis(frameworkId: string, riskId?: string): Observable<GapAnalysisResult> {\n    // Construction de l'URL avec les paramètres\n    let url = `${this.gapAnalysisPath}?frameworkId=${frameworkId}`;\n    if (riskId) {\n      url += `&riskId=${riskId}`;\n    }\n    \n    return this.apiService.get<GapAnalysisResult>(url)\n      .pipe(\n        catchError(error => {\n          console.error(`Erreur lors de la récupération de l'analyse d'écarts. Framework: ${frameworkId}, Risque: ${riskId || 'non spécifié'}`, error);\n          return throwError(() => new Error('Impossible de récupérer l\\'analyse d\\'écarts. Veuillez réessayer.'));\n        })\n      );\n  }\n\n  /**\n   * Récupère le pourcentage de conformité d'un risque par rapport à un framework\n   * @param riskId Identifiant du risque\n   * @param frameworkId Identifiant du framework\n   * @returns Observable contenant le pourcentage de conformité\n   */\n  getCompliancePercentage(riskId: string, frameworkId: string): Observable<number> {\n    return this.apiService.get<{percentage: number}>(`${this.basePath}/compliance-percentage?riskId=${riskId}&frameworkId=${frameworkId}`)\n      .pipe(\n        map(response => response.percentage),\n        catchError(error => {\n          console.error(`Erreur lors du calcul du pourcentage de conformité pour le risque ${riskId} et le framework ${frameworkId}`, error);\n          return throwError(() => new Error('Impossible de calculer le pourcentage de conformité. Veuillez réessayer.'));\n        })\n      );\n  }\n\n  /**\n   * Récupère un mapping spécifique par risque et exigence\n   * @param riskId Identifiant du risque\n   * @param requirementId Identifiant de l'exigence\n   * @returns Observable contenant le mapping s'il existe\n   */\n  getMappingByRiskAndRequirement(riskId: string, requirementId: string): Observable<RiskComplianceMapping[]> {\n    return this.apiService.get<RiskComplianceMapping[]>(\n      `${this.basePath}?riskId=${riskId}&requirementId=${requirementId}`\n    ).pipe(\n      catchError(error => {\n        console.error(`Erreur lors de la récupération du mapping pour le risque ${riskId} et l'exigence ${requirementId}`, error);\n        return throwError(() => new Error('Impossible de récupérer le mapping spécifique. Veuillez réessayer.'));\n      })\n    );\n  }\n\n  /**\n   * Extrait un message d'erreur lisible de la réponse HTTP\n   * @param error Erreur HTTP\n   * @returns Message d'erreur lisible\n   */\n  private getErrorMessage(error: any): string {\n    if (error.error) {\n      if (typeof error.error === 'string') {\n        return error.error;\n      }\n      if (error.error.message) {\n        return error.error.message;\n      }\n      if (typeof error.error === 'object') {\n        // Si c'est un objet d'erreurs de validation (champ -> message)\n        const validationErrors = Object.entries(error.error)\n          .map(([field, message]) => `${field}: ${message}`)\n          .join(', ');\n        \n        if (validationErrors) {\n          return `Erreurs de validation: ${validationErrors}`;\n        }\n      }\n    }\n    return error.statusText || 'Une erreur est survenue';\n  }\n} "],
  "mappings": "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",
  "names": []
}
